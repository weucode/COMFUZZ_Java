package compiler.c2;
import java.util.function.Supplier;
<separator>
public class MyJVMTest {
    String testDiv_hand_opt() {
<separator>
public class MyJVMTest {
    <K> String genericMethod1(K k) {
<separator>
public class MyJVMTest {
    void test_cp_inv(float[] a, float[] b, int k) {
<separator>
public class MyJVMTest {
    int zf() {
<separator>
package java.util.stream;
import static java.util.stream.Collectors.*;
<separator>
import java.io.*;
import java.net.*;
<separator>
public class MyJVMTest {
    int LEN = 1000;
<separator>
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
<separator>
import java.util.*;
import java.io.*;
<separator>
public class MyJVMTest {
    int ALIGN_OFF = 8;
<separator>
package jdk.test.lib;
public class MyJVMTest {
<separator>
import java.io.*;
import java.nio.*;
<separator>
import java.io.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp(char[] a, char[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    String DIGITS = "0123456789abcdef";
<separator>
package pkg.a.t;
public class MyJVMTest {
<separator>
package test.java.lang.invoke;
import java.util.*;
<separator>
package org.example.person;
import javax.naming.*;
<separator>
import java.security.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Object initialValue() {
<separator>
public class MyJVMTest {
    String ffff() {
<separator>
public class MyJVMTest {
    int SCALE = 2;
<separator>
public class MyJVMTest {
    int charsStart(byte[] data, int startIndex) {
<separator>
import javax.net.ssl.*;
import javax.net.ssl.SSLEngineResult.*;
<separator>
public class MyJVMTest {
    byte[] ba = new byte[] { -1 };
<separator>
import java.awt.datatransfer.DataFlavor;
public class MyJVMTest {
<separator>
import java.util.concurrent.atomic.AtomicIntegerArray;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp(long[] a, long[] b, float[] c, float[] d) {
<separator>
import java.util.*;
import java.text.*;
<separator>
public class MyJVMTest {
    void test_ci_oppos(boolean[] a) {
<separator>
public class MyJVMTest {
    int iter = 1000;
<separator>
public class MyJVMTest {
    String contextVersion;
<separator>
public class MyJVMTest {
    boolean test_isEqC(double a) {
<separator>
public class MyJVMTest {
    int lzcntl(int src1) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(short[] a, short[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    long xorReductionImplement(long[] a, long[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    long test_mulc1(long a) {
<separator>
public class MyJVMTest {
    boolean isDigit(int ch) {
<separator>
import java.lang.instrument.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    RuntimeException theUncheckedException = new UnsupportedOperationException("The unchecked exception " + "that should be seen");
<separator>
public class MyJVMTest {
    void reportException(String message) {
<separator>
import java.nio.charset.*;
import java.nio.*;
<separator>
import java.math.*;
import java.text.*;
<separator>
package compiler.blackhole;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    byte var_78 = Test6663854_Class_0.var_4 = Test6663854_Class_3.var_23;
<separator>
public class MyJVMTest {
    boolean notified = false;
<separator>
public class MyJVMTest {
    int javaMethod(int i) {
<separator>
package nsk.jvmti.RedefineClasses;
public class MyJVMTest {
<separator>
import java.util.*;
import java.math.*;
<separator>
public class MyJVMTest {
    int codePoint;
<separator>
import javax.crypto.CipherSpi;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String toHexString(int c) {
<separator>
public class MyJVMTest {
    void test_unrl_init(byte[] a0) {
<separator>
public class MyJVMTest {
    long testm2(long i) {
<separator>
public class MyJVMTest {
    int doesNotExist() {
<separator>
public class MyJVMTest {
    void test() {
<separator>
public class MyJVMTest {
    int index = 0;
<separator>
import javax.management.*;
import javax.management.monitor.*;
<separator>
public class MyJVMTest {
    boolean isPrintable(char c) {
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToLong(Double value) {
<separator>
public class MyJVMTest {
    Exception theCheckedException = new Exception("The checked exception that should be seen");
<separator>
public class MyJVMTest {
    byte test(byte i) {
<separator>
public class MyJVMTest {
    int meth1() {
<separator>
import java.math.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int check() {
<separator>
public class MyJVMTest {
    void testDouble() {
<separator>
import java.awt.image.*;
import java.io.*;
<separator>
import static java.awt.Font.*;
import static java.awt.font.GlyphVector.*;
<separator>
import java.io.*;
import java.text.*;
<separator>
public class MyJVMTest {
    void test_cp_neg(int[] a, int[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    int x() {
<separator>
public class MyJVMTest {
    void test_xora(int[] a0, int[] a1, int[] a2) {
<separator>
import java.lang.management.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean isDRBG(String mech) {
<separator>
import java.net.*;
import java.io.*;
<separator>
public class MyJVMTest {
    Object target = null;
<separator>
public class MyJVMTest {
    boolean theTestPassed = false;
<separator>
public class MyJVMTest {
    double EPS = 0;
<separator>
public class MyJVMTest {
    char L = '\u200E';
<separator>
public class MyJVMTest {
    byte[] message;
<separator>
import java.security.*;
import java.security.spec.*;
<separator>
public class MyJVMTest {
    int version() {
<separator>
package compiler.vectorization;
public class MyJVMTest {
<separator>
import java.awt.BorderLayout;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_vi_oppos(int[] a, int b) {
<separator>
import java.awt.*;
import java.awt.event.*;
<separator>
package com.ibm.jvmti.tests.BCIWithASM;
public class MyJVMTest {
<separator>
package com.ibm.jvmti.tests.getThreadState;
public class MyJVMTest {
<separator>
import javax.swing.*;
import java.awt.*;
<separator>
import java.lang.management.*;
import java.util.*;
<separator>
import javax.swing.UIManager;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int myKey;
<separator>
import java.util.GregorianCalendar;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean isNoncharacterCodePoint(int ch) {
<separator>
import java.io.*;
import java.util.*;
<separator>
public class MyJVMTest {
    T m() {
<separator>
import java.lang.management.*;
import javax.management.*;
<separator>
package gc.z;
import java.util.ArrayList;
<separator>
import java.io.*;
import javax.tools.*;
<separator>
import java.rmi.*;
import java.rmi.server.*;
<separator>
public class MyJVMTest {
    int iFld;
<separator>
public class MyJVMTest {
    int iFldV = 42;
<separator>
public class MyJVMTest {
    int EXTEND = 4;
<separator>
public class MyJVMTest {
    int getSize() {
<separator>
public class MyJVMTest {
    int decode2ByteInt(byte[] data, int pos) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(boolean[] a, boolean b) {
<separator>
public class MyJVMTest {
    long testRorOrLong1And(long val) {
<separator>
import javax.script.*;
public class MyJVMTest {
<separator>
import java.util.*;
import java.util.*;
<separator>
public class MyJVMTest {
    void test_unrl_lsai(short[] a0, short[] a1) {
<separator>
public class MyJVMTest {
    Runnable runWithinGetAttribute;
<separator>
public class MyJVMTest {
    String aaa() {
<separator>
import javax.swing.*;
import javax.swing.text.*;
<separator>
public class MyJVMTest {
    long remi_sump2_cond(Long j1) {
<separator>
import java.io.*;
import java.awt.*;
<separator>
public class MyJVMTest {
    void f(int x) {
<separator>
public class MyJVMTest {
    int INTERNAL_TIMEOUT = 240;
<separator>
import java.io.*;
import java.lang.instrument.*;
<separator>
import java.awt.*;
import java.awt.datatransfer.*;
<separator>
public class MyJVMTest {
    boolean passed = true;
<separator>
public class MyJVMTest {
    String helpLongFER() {
<separator>
public class MyJVMTest {
    boolean toggleButtonActionPerformed;
<separator>
public class MyJVMTest {
    long sum(int[] a) {
<separator>
import java.lang.reflect.Array;
public class MyJVMTest {
<separator>
package test.java.time.format;
import java.io.IOException;
<separator>
package compiler.loopopts;
public class MyJVMTest {
<separator>
import java.net.MalformedURLException;
import javax.management.MBeanNotificationInfo;
<separator>
import java.util.ResourceBundle;
public class MyJVMTest {
<separator>
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.SystemFlavorMap;
<separator>
public class MyJVMTest {
    long var_38 = (Test6663854_Class_3.var_24 |= Test6663854_Class_3.var_23 < (short) +3417996718812544000L) ? ~543562136204028928L : 1593726438;
<separator>
public class MyJVMTest {
    int VALUE = 7;
<separator>
public class MyJVMTest {
    void runTest() {
<separator>
public class MyJVMTest {
    void pkgAo() {
<separator>
public class MyJVMTest {
    int val = 100;
<separator>
public class MyJVMTest {
    void test_2ci_oppos(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    int unloadedCount = 0;
<separator>
public class MyJVMTest {
    int foo(int i) {
<separator>
public class MyJVMTest {
    int[] iArrFld = new int[10];
<separator>
import java.awt.BorderLayout;
import java.awt.Component;
<separator>
public class MyJVMTest {
    int num = 0;
<separator>
public class MyJVMTest {
    long var_bad = -1L;
<separator>
package compiler.intrinsics.klass;
public class MyJVMTest {
<separator>
import javax.net.*;
import javax.net.ssl.*;
<separator>
package com.ibm.j9.jsr292;
import static java.lang.invoke.MethodHandles.*;
<separator>
public class MyJVMTest {
    boolean active = true;
<separator>
import java.security.cert.*;
public class MyJVMTest {
<separator>
package gc.hashcode;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ora(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    int method1() {
<separator>
public class MyJVMTest {
    String name;
<separator>
package com.ibm.j9.jsr292;
public class MyJVMTest {
<separator>
package a;
public class MyJVMTest {
<separator>
package nsk.stress.network;
public class MyJVMTest {
<separator>
import java.util.ArrayList;
public class MyJVMTest {
<separator>
import java.util.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int test_helper_i;
<separator>
package compiler.stringopts;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int test_helper(int j) {
<separator>
public class MyJVMTest {
    boolean verifyBooleanCaching() {
<separator>
import static java.awt.image.BufferedImage.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long loadS2Lmask16_1(short[] sa) {
<separator>
public class MyJVMTest {
    Process impl;
<separator>
public class MyJVMTest {
    double sum(double[] a) {
<separator>
public class MyJVMTest {
    long m() {
<separator>
public class MyJVMTest {
    int SIZE = 128;
<separator>
public class MyJVMTest {
    int testm2(int i) {
<separator>
public class MyJVMTest {
    long vara_1 = 1L;
<separator>
public class MyJVMTest {
    Thread mainThread;
<separator>
public class MyJVMTest {
    int capacity = 2;
<separator>
public class MyJVMTest {
    int IGNORE_VALUE = -321;
<separator>
import java.util.*;
import java.util.zip.*;
<separator>
public class MyJVMTest {
    Integer stat() {
<separator>
public class MyJVMTest {
    int getInt(String in) {
<separator>
public class MyJVMTest {
    long[] s_prim_array_method() {
<separator>
public class MyJVMTest {
    long loadS2Lmask13(short[] sa) {
<separator>
import java.lang.reflect.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int foo() {
<separator>
import java.util.Arrays;
public class MyJVMTest {
<separator>
package compiler.c2;
import java.util.Random;
<separator>
import java.lang.invoke.*;
public class MyJVMTest {
<separator>
import com.sun.net.httpserver.*;
import java.util.*;
<separator>
public class MyJVMTest {
    void runTestOverflow() {
<separator>
public class MyJVMTest {
    int a, b, c, d, e;
<separator>
public class MyJVMTest {
    int test_helper(int[] dst, int stop) {
<separator>
public class MyJVMTest {
    boolean test() {
<separator>
import javax.swing.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long lFld = 0;
<separator>
public class MyJVMTest {
    String[] names() {
<separator>
public class MyJVMTest {
    T value;
<separator>
public class MyJVMTest {
    Object runForestRun = new Object();
<separator>
public class MyJVMTest {
    float prodReductionImplement(float[] a, float[] b, float total) {
<separator>
import java.awt.print.*;
import javax.print.*;
<separator>
public class MyJVMTest {
    Object[] set = new Object[11];
<separator>
import java.io.ByteArrayInputStream;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    T i;
<separator>
import java.lang.invoke.*;
import static java.lang.invoke.MethodHandles.*;
<separator>
import java.lang.annotation.*;
import java.lang.reflect.*;
<separator>
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
<separator>
public class MyJVMTest {
    byte[] dummy;
<separator>
package jdk.test.util;
import java.util.ResourceBundle;
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    void testRolIntZero(int val) {
<separator>
import javax.script.*;
import java.util.*;
<separator>
package com.ibm.dump.tests.excessive_gc;
import sun.misc.*;
<separator>
package compiler.intrinsics.math;
public class MyJVMTest {
<separator>
import java.text.Bidi;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void singleChar1() {
<separator>
public class MyJVMTest {
    void methodToLookFor() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, long[] b, byte c, long d) {
<separator>
public class MyJVMTest {
    void test_vi_neg(float[] a, float b) {
<separator>
public class MyJVMTest {
    short remi_sum_cond() {
<separator>
public class MyJVMTest {
    int sumReductionImplement(int[] a, int[] b, int[] c, int[] d) {
<separator>
import java.lang.invoke.*;
import java.util.*;
<separator>
import java.awt.*;
import javax.swing.*;
<separator>
import java.util.*;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    boolean test_isNeC(long a) {
<separator>
package jdk.jfr.tool;
public class MyJVMTest {
<separator>
import java.io.*;
import java.security.*;
<separator>
public class MyJVMTest {
    String g() {
<separator>
public class MyJVMTest {
    boolean barrier;
<separator>
public class MyJVMTest {
    void not_inlined(int[] array) {
<separator>
public class MyJVMTest {
    byte testb(byte i) {
<separator>
public class MyJVMTest {
    String[] value = new String[75];
<separator>
public class MyJVMTest {
    int SCOPE_ID_E1000G0 = 2;
<separator>
public class MyJVMTest {
    boolean next() {
<separator>
import java.awt.EventQueue;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int i = 2076285318;
<separator>
public class MyJVMTest {
    float sumReductionImplement(float[] a, float[] b, float[] c, float[] d, float total) {
<separator>
package jdk.testlibrary;
public class MyJVMTest {
<separator>
import java.nio.*;
import java.nio.charset.*;
<separator>
public class MyJVMTest {
    long checkMethod(long a, long b) {
<separator>
public class MyJVMTest {
    long endtime;
<separator>
public class MyJVMTest {
    void error(String msg) {
<separator>
public class MyJVMTest {
    void overflow() {
<separator>
public class MyJVMTest {
    <A> boolean equals(A x, A y) {
<separator>
public class MyJVMTest {
    void not_inlined() throws MyException {
<separator>
package org.example.ldapv4;
import java.net.*;
<separator>
public class MyJVMTest {
    int testRorIntApi(int val, int distance) {
<separator>
public class MyJVMTest {
    int SHIFT = 32;
<separator>
public class MyJVMTest {
    void m(int i) {
<separator>
import javax.management.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_vi_neg(int[] a, double[] b, int c, double d) {
<separator>
import java.lang.*;
import java.lang.reflect.*;
<separator>
package sun.tools.pack.verify;
import java.io.*;
<separator>
import java.net.*;
import java.nio.*;
<separator>
public class MyJVMTest {
    String getSigAlgName() {
<separator>
import java.awt.image.DataBuffer;
import java.awt.image.IndexColorModel;
<separator>
public class MyJVMTest {
    String var_1 = "abc";
<separator>
public class MyJVMTest {
    int _fCreationYear;
<separator>
package compiler.arraycopy;
import java.lang.reflect.Field;
<separator>
import java.awt.Color;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean similar(int i1, int i2) {
<separator>
import java.lang.reflect.*;
import java.util.*;
<separator>
public class MyJVMTest {
    boolean test_isNe(long a, long b) {
<separator>
package compiler.c1;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String extractJarDummyNameSuffix(String string) {
<separator>
public class MyJVMTest {
    int zb() {
<separator>
import java.awt.*;
public class MyJVMTest {
<separator>
package jdk.test.lib.security;
import java.io.File;
<separator>
public class MyJVMTest {
    boolean At = true, Before = false;
<separator>
public class MyJVMTest {
    void test_ci_inv(short[] a, int k) {
<separator>
public class MyJVMTest {
    String add(String x, String y) {
<separator>
import java.net.URL;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int failed, passed;
<separator>
public class MyJVMTest {
    void doIt(boolean unlikely) {
<separator>
import java.text.*;
import java.util.*;
<separator>
import javax.swing.text.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String outerString;
<separator>
public class MyJVMTest {
    float test(int stop, int[] array, int val) {
<separator>
public class MyJVMTest {
    int OFFSET = 3;
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    int prodReductionImplement(int[] a, int[] b, int total) {
<separator>
public class MyJVMTest {
    short remi_summ2_cond() {
<separator>
public class MyJVMTest {
    int test_neg(int a) {
<separator>
import java.awt.*;
import javax.swing.JComboBox;
<separator>
package j9vm.test.jni;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int[] input;
<separator>
import java.io.Reader;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int f() {
<separator>
public class MyJVMTest {
    void checkFalse(boolean b) {
<separator>
package meth;
import java.lang.invoke.MethodHandle;
<separator>
package nsk.stress.stack;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Byte ibc = new Byte((byte) 1);
<separator>
public class MyJVMTest {
    void test_vi_neg(char[] a, char b) {
<separator>
public class MyJVMTest {
    float v;
<separator>
import java.awt.Frame;
import java.awt.Component;
<separator>
public class MyJVMTest {
    long currentTimeMillis() {
<separator>
package test.java.lang.invoke;
import java.io.*;
<separator>
public class MyJVMTest {
    long alignDown(long value, long alignment) {
<separator>
public class MyJVMTest {
    int ARRAY_SIZE = 10000;
<separator>
public class MyJVMTest {
    int VALUE = 15;
<separator>
import java.lang.reflect.Constructor;
public class MyJVMTest {
<separator>
package com.sun.swingset3.demos.spinner;
import java.awt.*;
<separator>
public class MyJVMTest {
    void bar() {
<separator>
public class MyJVMTest {
    void test_2vi_neg(long[] a, long[] b, long c, long d) {
<separator>
package test.java.awt.regtesthelpers;
import java.awt.*;
<separator>
public class MyJVMTest {
    void f(java.util.List<? super Integer> l) {
<separator>
public class MyJVMTest {
    long[] reset(long[] array) {
<separator>
public class MyJVMTest {
    Object[] FINAL_EMPTY_ARRAY = {};
<separator>
package compiler.intrinsics.string;
public class MyJVMTest {
<separator>
import java.io.File;
import java.io.PrintWriter;
<separator>
public class MyJVMTest {
    int[] ia = new int[] { 0x12345678 };
<separator>
public class MyJVMTest {
    void check(double a, double b) {
<separator>
public class MyJVMTest {
    void test_2ci(double[] a, double[] b) {
<separator>
package nsk.share;
import java.io.PrintStream;
<separator>
import java.util.*;
import static java.util.GregorianCalendar.*;
<separator>
public class MyJVMTest {
    void expectThrow(Runnable r) {
<separator>
public class MyJVMTest {
    int _recur;
<separator>
public class MyJVMTest {
    void methodToRedefine() {
<separator>
public class MyJVMTest {
    boolean test_isGtC(long a) {
<separator>
package lib.jdb;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String dataModel = System.getProperty("sun.arch.data.model");
<separator>
package tools.javac.combo;
import javax.tools.Diagnostic;
<separator>
public class MyJVMTest {
    void test_unpack4_swap(char[] a0, long[] p4) {
<separator>
public class MyJVMTest {
    String startTag(String tag) {
<separator>
public class MyJVMTest {
    int iter = 10000;
<separator>
public class MyJVMTest {
    void foo() {
<separator>
public class MyJVMTest {
    boolean isCorrect() {
<separator>
public class MyJVMTest {
    int fcomp(int i) {
<separator>
public class MyJVMTest {
    String foo() {
<separator>
public class MyJVMTest {
    int testRorOrInt16Eor(int val) {
<separator>
import java.util.concurrent.CountDownLatch;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double testm2(double f, int i) {
<separator>
package nsk.share.jvmti.GetConstantPool;
import java.lang.reflect.*;
<separator>
import java.io.File;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int xorReductionImplement(int[] a, int[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    int zh() {
<separator>
import java.io.*;
import static java.nio.file.StandardOpenOption.*;
<separator>
public class MyJVMTest {
    void emptyDocComment4() {
<separator>
public class MyJVMTest {
    long remi_sumb2() {
<separator>
package org.netbeans.jemmy.util;
import javax.swing.UIManager;
<separator>
public class MyJVMTest {
    boolean test1(Class c) {
<separator>
public class MyJVMTest {
    boolean field;
<separator>
public class MyJVMTest {
    int JAPANESE_ERA_CODEPOINT = 0x32FF;
<separator>
public class MyJVMTest {
    void dumpBytes(byte[] bytes) {
<separator>
public class MyJVMTest {
    String helpCapabilityRetention() {
<separator>
import java.util.*;
import java.nio.*;
<separator>
public class MyJVMTest {
    float remi_sumb2() {
<separator>
public class MyJVMTest {
    String text = "/ at start is bad";
<separator>
package selectionresolution;
import java.util.Arrays;
<separator>
public class MyJVMTest {
    int testm11() {
<separator>
public class MyJVMTest {
    String wahoo() {
<separator>
public class MyJVMTest {
    int testToUnsignedLong() {
<separator>
import java.awt.print.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void callToChars3(int codePoint, char[] dst, int index, Class expectedException) {
<separator>
public class MyJVMTest {
    String getByteString(byte[] bytes) {
<separator>
import java.io.*;
import java.nio.channels.*;
<separator>
import java.util.Random;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void run() throws InterruptedException {
<separator>
public class MyJVMTest {
    int value;
<separator>
public class MyJVMTest {
    void test3(int i, int limit, int[] arr) {
<separator>
public class MyJVMTest {
    void reductionInit1(long[] a, long[] b, long[] c) {
<separator>
public class MyJVMTest {
    Object doFloorDiv(int x, int y) {
<separator>
public class MyJVMTest {
    long startTime;
<separator>
public class MyJVMTest {
    void test_cp(boolean[] a, boolean[] b) {
<separator>
public class MyJVMTest {
    int x = 1;
<separator>
import java.util.HashMap;
import javax.security.auth.login.AppConfigurationEntry;
<separator>
import java.awt.*;
import java.awt.image.*;
<separator>
public class MyJVMTest {
    int get() {
<separator>
public class MyJVMTest {
    byte[] testArrayAllocation(int index, int inc) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(char[] a, char b) {
<separator>
import javax.print.*;
import java.applet.*;
<separator>
package nsk.share.jdi.sde;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int runTest(int val) {
<separator>
package t;
import t.WarnWrongYieldTest.yield;
<separator>
public class MyJVMTest {
    int mulReductionImplement(int[] a, int[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    void doit(Runnable t) {
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b, float[] c, float[] d) {
<separator>
import java.io.*;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    int ITERS = 5000;
<separator>
public class MyJVMTest {
    void test_ci_inv(long[] a, int k) {
<separator>
public class MyJVMTest {
    Long v = 1L;
<separator>
public class MyJVMTest {
    boolean verifyCharacterCaching() {
<separator>
import java.util.regex.*;
import java.math.BigDecimal;
<separator>
public class MyJVMTest {
    long test(long a, long b, long c) {
<separator>
public class MyJVMTest {
    int testRorOrInt1Eon(int val) {
<separator>
public class MyJVMTest {
    void check(long leftFactor, long rightFactor, long optimizedProduct, long constantProduct) {
<separator>
package examples;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double testp(double f, int i, Double ib) {
<separator>
import javax.lang.model.element.*;
import javax.lang.model.type.*;
<separator>
package jdk.test.lib.cds;
import java.util.ArrayList;
<separator>
import java.security.*;
import javax.crypto.*;
<separator>
package org.openj9.test.management.util;
import java.util.concurrent.CountDownLatch;
<separator>
package p1.p2;
import java.util.ArrayList;
<separator>
package compiler.arraycopy;
import java.util.Arrays;
<separator>
import java.security.*;
import java.lang.*;
<separator>
package util;
import javax.sql.RowSetEvent;
<separator>
import java.security.*;
import java.lang.instrument.Instrumentation;
<separator>
public class MyJVMTest {
    Test7103261 null_value;
<separator>
public class MyJVMTest {
    void ensureCapacityImpl(int min) {
<separator>
public class MyJVMTest {
    String s = "css";
<separator>
public class MyJVMTest {
    void test(Object o, boolean cond) {
<separator>
public class MyJVMTest {
    boolean test_isLtC(double a) {
<separator>
public class MyJVMTest {
    String fff() {
<separator>
public class MyJVMTest {
    float test_mul(float a, float b) {
<separator>
public class MyJVMTest {
    void f2(int a, int b) {
<separator>
public class MyJVMTest {
    void assertEquals(Object o1, Object o2) {
<separator>
public class MyJVMTest {
    void test(double a) throws Exception {
<separator>
public class MyJVMTest {
    String getAlgorithm() {
<separator>
public class MyJVMTest {
    long testRorAddLong63(long val) {
<separator>
public class MyJVMTest {
    String[] formats = { "png", "jpeg", "tiff", "bmp", "gif" };
<separator>
public class MyJVMTest {
    Long m(Long s, Long ts) {
<separator>
import java.security.*;
import java.io.*;
<separator>
package gc.hashcode;
import java.util.ArrayList;
<separator>
public class MyJVMTest {
    int negativeInt(int i) {
<separator>
package com.oracle.mxtool.junit;
import java.lang.reflect.Method;
<separator>
import java.math.BigInteger;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int i;
<separator>
import java.util.*;
import java.util.function.*;
<separator>
import javax.net.ssl.*;
import java.io.*;
<separator>
public class MyJVMTest {
    int getSize(int i) {
<separator>
package jdk.jfr.api.settings;
import java.util.Set;
<separator>
import java.nio.channels.*;
public class MyJVMTest {
<separator>
package org.openjdk.tests.java.util.stream;
import java.util.*;
<separator>
public class MyJVMTest {
    ThreadLocal<String> other;
<separator>
package jdk.test.lib.jittester.utils;
import java.util.*;
<separator>
package examples;
import java.lang.invoke.MethodHandles;
<separator>
public class MyJVMTest {
    String getLongString(char c1, char c2) {
<separator>
public class MyJVMTest {
    boolean isPasswordField;
<separator>
package utils;
import java.lang.management.ManagementFactory;
<separator>
public class MyJVMTest {
    String doit() {
<separator>
package compiler.vectorization;
import java.util.stream.IntStream;
<separator>
public class MyJVMTest {
    byte[] asciibytes(String s) {
<separator>
public class MyJVMTest {
    int calcx() {
<separator>
public class MyJVMTest {
    boolean isUnix = false;
<separator>
public class MyJVMTest {
    int f(String s, int a, short b) {
<separator>
package MyPackage;
public class MyJVMTest {
<separator>
package sun.security.testlibrary;
import java.io.*;
<separator>
public class MyJVMTest {
    boolean _doSpin = true;
<separator>
public class MyJVMTest {
    void doThrow() throws OnThrowException {
<separator>
public class MyJVMTest {
    int global;
<separator>
public class MyJVMTest {
    void testd() {
<separator>
import java.util.regex.*;
public class MyJVMTest {
<separator>
import javax.swing.*;
import javax.swing.plaf.basic.*;
<separator>
public class MyJVMTest {
    int test2(int[] src) {
<separator>
public class MyJVMTest {
    long testb(long i) {
<separator>
public class MyJVMTest {
    int q = 4;
<separator>
public class MyJVMTest {
    long safeMethod(long x, long y) {
<separator>
import java.lang.instrument.*;
import java.net.*;
<separator>
public class MyJVMTest {
    int ADD_INIT = Character.MAX_VALUE - 500;
<separator>
public class MyJVMTest {
    T6521805c this$0() {
<separator>
public class MyJVMTest {
    double simplem2(double i) {
<separator>
public class MyJVMTest {
    void pkgCo() {
<separator>
import javax.swing.*;
import javax.swing.event.*;
<separator>
package indify;
import java.util.*;
<separator>
import java.io.IOException;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_lsai(short[] a0, short[] a1) {
<separator>
public class MyJVMTest {
    boolean h_passed = false;
<separator>
public class MyJVMTest {
    int i2;
<separator>
public class MyJVMTest {
    boolean testPlatformClassLoader(Class<?> cls) {
<separator>
public class MyJVMTest {
    int index;
<separator>
import java.applet.Applet;
import java.io.File;
<separator>
public class MyJVMTest {
    int limit6 = Integer.MAX_VALUE - 10000;
<separator>
public class MyJVMTest {
    Object i_object_par_method(Object obj) {
<separator>
package nsk.jvmti.RedefineClasses;
import java.io.PrintStream;
<separator>
import java.io.*;
import java.util.jar.*;
<separator>
public class MyJVMTest {
    void test_diva(char[] a0, char[] a1, short[] a2) {
<separator>
public class MyJVMTest {
    int field;
<separator>
public class MyJVMTest {
    void test_cp(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    void dummy() {
<separator>
public class MyJVMTest {
    boolean state = false;
<separator>
public class MyJVMTest {
    byte remi_sum() {
<separator>
public class MyJVMTest {
    void test_mulv(char[] a0, char[] a1, char b) {
<separator>
public class MyJVMTest {
    void emptyDocComment6() {
<separator>
public class MyJVMTest {
    int[] DaysInYear = new int[] { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
<separator>
package typeannos;
import java.lang.annotation.*;
<separator>
public class MyJVMTest {
    char R = '\u202F';
<separator>
public class MyJVMTest {
    String firstName;
<separator>
public class MyJVMTest {
    long testRorAddLong1(long val) {
<separator>
import java.net.*;
public class MyJVMTest {
<separator>
import javax.swing.*;
import java.beans.*;
<separator>
import java.awt.Transparency;
import java.awt.color.ColorSpace;
<separator>
public class MyJVMTest {
    int i = 1;
<separator>
public class MyJVMTest {
    void test_cp_inv(int[] a, int[] b, int k) {
<separator>
public class MyJVMTest {
    double test(double[] array1, double[] array2) {
<separator>
public class MyJVMTest {
    int callee(int count) {
<separator>
public class MyJVMTest {
    boolean work() {
<separator>
public class MyJVMTest {
    String[] values;
<separator>
public class MyJVMTest {
    void test_cp_oppos(int[] a, int[] b) {
<separator>
public class MyJVMTest {
    void assertAssignableType(Object info, Class<?> requiredType, Class<?> actualType) throws IllegalArgumentException {
<separator>
public class MyJVMTest {
    int w = 100;
<separator>
import java.io.*;
import java.math.*;
<separator>
public class MyJVMTest {
    ThreadGroup getSystemThreadGroup() {
<separator>
import java.lang.reflect.*;
import javax.management.*;
<separator>
import java.nio.channels.*;
import java.net.*;
<separator>
public class MyJVMTest {
    void assertOneField(Class<?> c) {
<separator>
public class MyJVMTest {
    byte[] LOOPBACKIPV6ADDRESS = { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01 };
<separator>
public class MyJVMTest {
    short initShort(String[] args, short v) {
<separator>
public class MyJVMTest {
    short testp2(short i, Short ib1) {
<separator>
package nsk.stress.numeric.numeric004;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    void testui() {
<separator>
package jdk.nashorn.api.test;
import java.sql.Connection;
<separator>
public class MyJVMTest {
    int test(int a, int b, int c) {
<separator>
public class MyJVMTest {
    void test4(int i, int limit, int[] arr) {
<separator>
public class MyJVMTest {
    <E> void bug(E[] a, E e) {
<separator>
import java.lang.reflect.*;
import java.lang.annotation.*;
<separator>
public class MyJVMTest {
    void test_ci_inv(byte[] a, int k) {
<separator>
public class MyJVMTest {
    void test_ci_neg(float[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    double test_rem(double a, double b) {
<separator>
public class MyJVMTest {
    void m(int[] a, int[] b, int j) {
<separator>
public class MyJVMTest {
    double SQRT3 = Math.sqrt(3.0), SQRT2 = Math.sqrt(2.0);
<separator>
public class MyJVMTest {
    int add(int var1, int var2) {
<separator>
public class MyJVMTest {
    int assertionCount = 0;
<separator>
import java.awt.Button;
public class MyJVMTest {
<separator>
import java.net.URLClassLoader;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void testHarness(Class clazz) {
<separator>
public class MyJVMTest {
    boolean test_isLt(float a, float b) {
<separator>
public class MyJVMTest {
    int f;
<separator>
package jdk.testlibrary;
import java.util.*;
<separator>
public class MyJVMTest {
    String myString;
<separator>
package jdk.nashorn.test.models;
public class MyJVMTest {
<separator>
package myloaders;
import java.io.*;
<separator>
package compiler.rangechecks;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp_neg(short[] a, short[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    short testp(short i, Short ib) {
<separator>
import java.lang.management.ThreadMXBean;
import java.lang.management.ManagementFactory;
<separator>
import java.io.PrintStream;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int initVal = -1;
<separator>
public class MyJVMTest {
    void test_cp_neg(double[] a, double[] b) {
<separator>
import java.awt.*;
import java.awt.print.*;
<separator>
public class MyJVMTest {
    int getIndex(int index) {
<separator>
public class MyJVMTest {
    int SIZE = 30;
<separator>
public class MyJVMTest {
    String helpVerboseGCSubscription_3alarm() {
<separator>
public class MyJVMTest {
    int sumb2(int[] a) {
<separator>
public class MyJVMTest {
    double least;
<separator>
public class MyJVMTest {
    boolean replace(byte[] buff, byte[] f, byte[] t, int i) {
<separator>
import java.nio.CharBuffer;
import java.nio.ByteBuffer;
<separator>
public class MyJVMTest {
    void test(long[] array) {
<separator>
import java.nio.ByteBuffer;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void singleChar0() {
<separator>
public class MyJVMTest {
    int testedInstanceMethod(int n) {
<separator>
public class MyJVMTest {
    void baz() {
<separator>
import java.awt.*;
import java.awt.color.*;
<separator>
import java.io.Serializable;
public class MyJVMTest {
<separator>
import javax.management.*;
import java.io.IOException;
<separator>
public class MyJVMTest {
    long testRorOrLong1Bic(long val) {
<separator>
public class MyJVMTest {
    String myName;
<separator>
public class MyJVMTest {
    void throwException() throws IllegalArgumentException, InterruptedException {
<separator>
public class MyJVMTest {
    boolean isZero(int d) {
<separator>
public class MyJVMTest {
    void test_unrl_lsai(long[] a0, long[] a1) {
<separator>
public class MyJVMTest {
    boolean error = false;
<separator>
package test;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void reverse(String str, char[] buffer, int size) {
<separator>
public class MyJVMTest {
    String helpVerboseGCSubscription_1simple() {
<separator>
public class MyJVMTest {
    void test_cp_inv(boolean[] a, boolean[] b, int k) {
<separator>
public class MyJVMTest {
    String getB() {
<separator>
public class MyJVMTest {
    void foo() throws Exception {
<separator>
public class MyJVMTest {
    int i = m();
<separator>
package jdk.jfr.jvm;
public class MyJVMTest {
<separator>
import java.io.*;
import javax.net.ssl.*;
<separator>
public class MyJVMTest {
    boolean isIdentifierIgnorable(int codePoint, String category) {
<separator>
public class MyJVMTest {
    Object[][] charData = { { new Character('\uFFFE'), Character.UnicodeBlock.SPECIALS }, { new Character('\uFFFF'), Character.UnicodeBlock.SPECIALS } };
<separator>
public class MyJVMTest {
    double testb(double f, int i) {
<separator>
public class MyJVMTest {
    void checkColinear(double dx1, double dy1, double dx2, double dy2) {
<separator>
public class MyJVMTest {
    short remi_sum2_cond() {
<separator>
package nsk.stress.stack;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    int[] a;
<separator>
public class MyJVMTest {
    int remi_sum_cond() {
<separator>
public class MyJVMTest {
    void assertThat(boolean assertion) {
<separator>
import java.awt.image.BufferedImage;
import java.io.IOException;
<separator>
public class MyJVMTest {
    boolean catchFinalizer = false;
<separator>
package jdk.jfr.api.settings;
import java.util.HashSet;
<separator>
import java.io.*;
import java.security.cert.*;
<separator>
public class MyJVMTest {
    boolean test_isLt(int a, int b) {
<separator>
public class MyJVMTest {
    void test(Object value, String name) {
<separator>
import java.net.*;
import java.util.*;
<separator>
public class MyJVMTest {
    String u = "asu";
<separator>
public class MyJVMTest {
    double earth(double x) {
<separator>
public class MyJVMTest {
    int age = 100;
<separator>
import java.awt.DisplayMode;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int next = 1;
<separator>
public class MyJVMTest {
    int result = 0;
<separator>
public class MyJVMTest {
    boolean done = false;
<separator>
import java.util.*;
import javax.imageio.spi.*;
<separator>
public class MyJVMTest {
    float test_helper(long l, long stop, float res) {
<separator>
package org.openj9.test.attachAPI;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int helper(int j, int k, int l, int m) {
<separator>
import javax.crypto.*;
import javax.net.ssl.*;
<separator>
import java.io.*;
import java.util.zip.*;
<separator>
public class MyJVMTest {
    void ensureProperCallingThread() {
<separator>
public class MyJVMTest {
    int compareTo(E other) {
<separator>
public class MyJVMTest {
    <E> void iterate(Iterable<E> iterable) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, long elem, long val) {
<separator>
package jdk.nashorn.internal.performance;
import java.io.File;
<separator>
public class MyJVMTest {
    String testDiv_un_opt() {
<separator>
public class MyJVMTest {
    Float ibc = new Float(1.f);
<separator>
public class MyJVMTest {
    int failures = 0;
<separator>
import java.util.*;
import java.util.Locale.*;
<separator>
public class MyJVMTest {
    void test_addv(int[] a0, int[] a1, int b) {
<separator>
package com.foo;
import java.io.*;
<separator>
public class MyJVMTest {
    int zd() {
<separator>
public class MyJVMTest {
    void testSigned(char c) {
<separator>
import java.util.prefs.Preferences;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int checkMethod(int a, int b) {
<separator>
public class MyJVMTest {
    Integer ibc = new Integer(1);
<separator>
public class MyJVMTest {
    double sumDouble(double[] d1, double[] d2, double[] d3) {
<separator>
import java.awt.*;
import java.awt.geom.*;
<separator>
public class MyJVMTest {
    boolean test(T t) {
<separator>
public class MyJVMTest {
    boolean isSHA3Supported(String provName) {
<separator>
import java.lang.annotation.*;
import java.util.*;
<separator>
public class MyJVMTest {
    String i_string_par_method(String s) {
<separator>
package com.ibm.j9.security;
import java.io.*;
<separator>
public class MyJVMTest {
    void test_2ci_inv(boolean[] a, boolean[] b, int k) {
<separator>
import javax.sound.midi.MidiDevice;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp(int[] a, int[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    String getClassVersion() {
<separator>
public class MyJVMTest {
    void waitForDump() {
<separator>
public class MyJVMTest {
    short s;
<separator>
public class MyJVMTest {
    int tzcomp(int i) {
<separator>
public class MyJVMTest {
    void sleep(long msecs) {
<separator>
import java.lang.instrument.ClassFileTransformer;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String keywordValue(String[] args, String keyword) {
<separator>
import java.nio.charset.Charset;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void blahBlahBlah(int j) {
<separator>
public class MyJVMTest {
    int pass = 0;
<separator>
package jdk.test.lib.hprof.parser;
import java.io.FilterInputStream;
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, int[] b, byte c, int d) {
<separator>
public class MyJVMTest {
    void run() {
<separator>
public class MyJVMTest {
    int meth3() {
<separator>
public class MyJVMTest {
    void test(String expected, Object object) {
<separator>
public class MyJVMTest {
    int test(int val, long max) {
<separator>
public class MyJVMTest {
    String BARE_E1000G0HOSTADDRESS = "fe80:0:0:0:21b:24ff:febd:f29c";
<separator>
public class MyJVMTest {
    int remi_sumb2_cond() {
<separator>
public class MyJVMTest {
    long pageSizeStringToLong(String pageSizeString) {
<separator>
import java.net.*;
import java.nio.channels.*;
<separator>
public class MyJVMTest {
    Double foob(double i) {
<separator>
public class MyJVMTest {
    int ZIP_ENTRY_NUM = 5;
<separator>
import java.io.InputStream;
public class MyJVMTest {
<separator>
import java.math.BigDecimal;
import java.math.BigInteger;
<separator>
public class MyJVMTest {
    void test_ci_neg(int[] a, long[] b) {
<separator>
public class MyJVMTest {
    void testShort(short a, short b) {
<separator>
public class MyJVMTest {
    int res;
<separator>
public class MyJVMTest {
    float test(float f, int i) {
<separator>
public class MyJVMTest {
    void e1() throws E1 {
<separator>
public class MyJVMTest {
    int N;
<separator>
public class MyJVMTest {
    int stageNum;
<separator>
public class MyJVMTest {
    String getHtmlText(int i) {
<separator>
public class MyJVMTest {
    String anchorName(String name, String text) {
<separator>
public class MyJVMTest {
    long[] i_prim_array_method() {
<separator>
public class MyJVMTest {
    int a = 0;
<separator>
package nsk.stress.numeric.numeric001;
public class MyJVMTest {
<separator>
package com.evilprovider;
import java.security.*;
<separator>
public class MyJVMTest {
    int BIT_MASK = 0xEC80F731;
<separator>
import java.lang.management.ThreadInfo;
public class MyJVMTest {
<separator>
import java.lang.annotation.*;
import java.lang.reflect.Constructor;
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToInt(Double value) {
<separator>
public class MyJVMTest {
    short remi_summ2() {
<separator>
public class MyJVMTest {
    int compare(Integer x, Integer y) {
<separator>
import java.io.*;
import javax.management.*;
<separator>
public class MyJVMTest {
    Object field1 = new Object();
<separator>
public class MyJVMTest {
    void m(int a, int b) {
<separator>
public class MyJVMTest {
    String print(boolean arg) {
<separator>
package gc.hashcode.ExternalHashingTest;
import java.text.SimpleDateFormat;
<separator>
public class MyJVMTest {
    double start = 0.0;
<separator>
import java.util.*;
import java.util.concurrent.*;
<separator>
public class MyJVMTest {
    int zc() {
<separator>
package jdk.test.internal.resources;
import java.util.ListResourceBundle;
<separator>
public class MyJVMTest {
    int simplem2(int i) {
<separator>
public class MyJVMTest {
    String input;
<separator>
public class MyJVMTest {
    void println(String s) {
<separator>
package nsk.stress.numeric.numeric008;
public class MyJVMTest {
<separator>
import java.util.concurrent.atomic.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String helpSyncDecompile() {
<separator>
public class MyJVMTest {
    Object doStrictFloorDiv(long x, long y) {
<separator>
public class MyJVMTest {
    int[] pos = { 0, 1, 2, 3 };
<separator>
public class MyJVMTest {
    <T> T getDefault(T[] array, int index) {
<separator>
public class MyJVMTest {
    int test_andc1(int a) {
<separator>
public class MyJVMTest {
    Short ibc = new Short((short) 1);
<separator>
public class MyJVMTest {
    double ulps(double val1, double val2) {
<separator>
import java.net.*;
import java.security.*;
<separator>
public class MyJVMTest {
    boolean lfMissing = false;
<separator>
import java.lang.reflect.Field;
public class MyJVMTest {
<separator>
import java.util.*;
import javax.net.ssl.*;
<separator>
public class MyJVMTest {
    int N = 400;
<separator>
public class MyJVMTest {
    long lFldV = 42;
<separator>
public class MyJVMTest {
    A create() {
<separator>
import java.util.LinkedList;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int testm2() {
<separator>
public class MyJVMTest {
    double remi_sump_cond(Double j) {
<separator>
public class MyJVMTest {
    Object test_dummy;
<separator>
public class MyJVMTest {
    int method() {
<separator>
import java.security.*;
import java.security.cert.*;
<separator>
public class MyJVMTest {
    Object lock = new Object();
<separator>
package test.java.awt.regtesthelpers.process;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    boolean test_isLe(long a, long b) {
<separator>
public class MyJVMTest {
    Long ibc = new Long(1);
<separator>
import java.util.*;
import java.net.*;
<separator>
public class MyJVMTest {
    void test_vi_inv(byte[] a, byte b, int k) {
<separator>
public class MyJVMTest {
    double D = -7.05306122448979611050e-01;
<separator>
public class MyJVMTest {
    long signExtractLong4(long x) {
<separator>
public class MyJVMTest {
    String constr = "y";
<separator>
public class MyJVMTest {
    boolean causedBy(Exception e, Class klass) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(int[] a, long[] b) {
<separator>
package gc.stress.gclocker;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String refType;
<separator>
import java.lang.ref.Reference;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean verifyIntegerCaching() {
<separator>
import java.lang.instrument.Instrumentation;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int unchecked(int a, int b) {
<separator>
public class MyJVMTest {
    boolean setClassAssertionStatusMethodCalled;
<separator>
public class MyJVMTest {
    int m(int v) {
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, byte b) {
<separator>
package test.rowset.filteredrowset;
import java.sql.SQLException;
<separator>
package jdk.test.lib.management;
import com.sun.management.HotSpotDiagnosticMXBean;
<separator>
import com.sun.management.HotSpotDiagnosticMXBean;
import com.sun.management.VMOption;
<separator>
public class MyJVMTest {
    Runnable ir;
<separator>
package j9vm.test.unsafe;
public class MyJVMTest {
<separator>
import static java.lang.Math.*;
import java.security.SecureRandom;
<separator>
public class MyJVMTest {
    void sumReductionInit(long[] a, long[] b, long[] c) {
<separator>
package nsk.stress.numeric.numeric002;
public class MyJVMTest {
<separator>
import java.math.BigDecimal;
public class MyJVMTest {
<separator>
import java.util.ListResourceBundle;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void pass() {
<separator>
public class MyJVMTest {
    int arg = 123456;
<separator>
public class MyJVMTest {
    int intRes() {
<separator>
import java.awt.Component;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void hitSearchLimit() {
<separator>
public class MyJVMTest {
    int testRorAddInt16(int val) {
<separator>
public class MyJVMTest {
    int[] array;
<separator>
public class MyJVMTest {
    Integer II = new Integer(42);
<separator>
public class MyJVMTest {
    int testRorOrInt31Orn(int val) {
<separator>
public class MyJVMTest {
    void test(int n) {
<separator>
public class MyJVMTest {
    int m(int[] array) {
<separator>
public class MyJVMTest {
    Object func_7(final short arg_0, String arg_1, final Tester_Class_3 arg_2) {
<separator>
public class MyJVMTest {
    int test() {
<separator>
public class MyJVMTest {
    void test_vi_neg(short[] a, double[] b, short c, double d) {
<separator>
import javax.net.ssl.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean localizedMessageCalled = false;
<separator>
public class MyJVMTest {
    long DIVISOR;
<separator>
package providersrc.spi.src;
import java.util.spi.TimeZoneNameProvider;
<separator>
public class MyJVMTest {
    void test_subv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    String helpGetMemoryCategories() {
<separator>
public class MyJVMTest {
    long IIMM24_3 = 0x1000;
<separator>
public class MyJVMTest {
    boolean condition = false;
<separator>
import javax.swing.*;
import java.io.File;
<separator>
package jdk.jfr.javaagent;
import java.util.concurrent.atomic.AtomicBoolean;
<separator>
public class MyJVMTest {
    void test_ci(short[] a) {
<separator>
public class MyJVMTest {
    Object[] s_ref_array_method() {
<separator>
public class MyJVMTest {
    boolean equal(String s1, String s2) {
<separator>
public class MyJVMTest {
    String method2() {
<separator>
public class MyJVMTest {
    long remi_sum_cond() {
<separator>
public class MyJVMTest {
    Class<?> forName5() {
<separator>
public class MyJVMTest {
    int doNothingInJava2(Object obj1, Object obj2) {
<separator>
public class MyJVMTest {
    int IIMM24_3 = 0x1000;
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a, int[] b) {
<separator>
public class MyJVMTest {
    void testChar() {
<separator>
public class MyJVMTest {
    void test_vi(long[] a, double[] b, long c, double d) {
<separator>
public class MyJVMTest {
    void test_srav(char[] a0, char[] a1, int b) {
<separator>
import javax.swing.plaf.ColorUIResource;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String format(Object o) {
<separator>
public class MyJVMTest {
    long defaultWorkTimeMillis = Long.getLong("millis", 10L);
<separator>
public class MyJVMTest {
    boolean test_isNe(float a, float b) {
<separator>
package util;
import org.xml.sax.SAXException;
<separator>
public class MyJVMTest {
    int remi_summ2() {
<separator>
public class MyJVMTest {
    boolean test2(int arg, int value) {
<separator>
import java.security.*;
import java.util.*;
<separator>
public class MyJVMTest {
    int SHIFT = 16;
<separator>
public class MyJVMTest {
    double remi_sum2_cond() {
<separator>
public class MyJVMTest {
    String[] reset(String[] array) {
<separator>
public class MyJVMTest {
    int test2(int i) {
<separator>
public class MyJVMTest {
    long var_36 = (4.4957056E37F < Tester_Class_1.var_22 + 281107777128915968L ? (Tester_Class_1.var_26 = 't') : (char) Tester_Class_1.var_28) - (4654994097042818048L | (byte) (Tester_Class_0.var_2 = (short) (Tester_Class_1.var_26 = ']'))) ^ 349774342780012544L;
<separator>
public class MyJVMTest {
    long create(long value, int v) {
<separator>
public class MyJVMTest {
    boolean loop = true;
<separator>
public class MyJVMTest {
    String method(int field) {
<separator>
package com.ibm.jvmti.tests.resourceExhausted;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp_oppos(char[] a, char[] b) {
<separator>
import java.io.*;
import java.lang.*;
<separator>
public class MyJVMTest {
    int zg() {
<separator>
public class MyJVMTest {
    int error;
<separator>
public class MyJVMTest {
    boolean isLetter(String category) {
<separator>
public class MyJVMTest {
    double sum = 0;
<separator>
public class MyJVMTest {
    void callOffsetByCodePoints(char[] a, int start, int count, int index, int offset, Class expectedException) {
<separator>
public class MyJVMTest {
    int v;
<separator>
import java.util.*;
import javax.management.*;
<separator>
public class MyJVMTest {
    void test_cp_neg(int[] a, int[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    short getUranus() {
<separator>
package compiler.c1;
import java.io.IOException;
<separator>
package org.netbeans.jemmy;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci(float[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(double[] a, double[] b) {
<separator>
package jdk.test.resources;
import java.util.ListResourceBundle;
<separator>
public class MyJVMTest {
    short test2(short i) {
<separator>
public class MyJVMTest {
    String s = "ass";
<separator>
public class MyJVMTest {
    void init(int[] a) {
<separator>
public class MyJVMTest {
    void test_ora(char[] a0, char[] a1, short[] a2) {
<separator>
package vm.compiler.jbe.subcommon.subcommon01;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long simple2(long i) {
<separator>
package j9vm.runner;
import java.util.*;
<separator>
public class MyJVMTest {
    void fail(String errMessage) {
<separator>
package org.openjdk.bench.jdk.incubator.foreign.points.support;
import java.nio.ByteBuffer;
<separator>
public class MyJVMTest {
    boolean done() {
<separator>
package jdk.test.lib;
import java.util.Random;
<separator>
public class MyJVMTest {
    boolean informationLossFloatToShort(Float value) {
<separator>
public class MyJVMTest {
    int doSomething() {
<separator>
public class MyJVMTest {
    boolean laxLineEndings;
<separator>
package vm.mlvm.meth.share;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int testRorOrInt1And(int val) {
<separator>
public class MyJVMTest {
    Class<? extends Exception> exceptionClass;
<separator>
public class MyJVMTest {
    long nextLong() {
<separator>
public class MyJVMTest {
    String AGENT_LIB = "SuspendWithObjectMonitorEnter";
<separator>
public class MyJVMTest {
    boolean print = false;
<separator>
public class MyJVMTest {
    long testRorAddLong64(long val) {
<separator>
public class MyJVMTest {
    int versionOf(int major, int minor) {
<separator>
public class MyJVMTest {
    int count;
<separator>
public class MyJVMTest {
    Object doFloorMod(int x, int y) {
<separator>
public class MyJVMTest {
    long[] la = new long[] { 0x12345678abcdefL };
<separator>
public class MyJVMTest {
    String print(double arg) {
<separator>
public class MyJVMTest {
    String name() {
<separator>
public class MyJVMTest {
    int errors;
<separator>
import java.util.Iterator;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String align(int l) {
<separator>
import java.util.prefs.*;
public class MyJVMTest {
<separator>
package compiler.jsr292;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    boolean test_isLe(float a, float b) {
<separator>
public class MyJVMTest {
    Exception thrown = null;
<separator>
package nsk.stress.numeric.numeric003;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    long IMM = 0xf0f0f0f0f0f0f0f0L;
<separator>
import java.awt.*;
import java.awt.font.*;
<separator>
public class MyJVMTest {
    int[] array = new int[100];
<separator>
package compiler.intrinsics.bigInteger;
import java.math.BigInteger;
<separator>
import java.math.BigDecimal;
import java.math.MathContext;
<separator>
public class MyJVMTest {
    void m() {
<separator>
public class MyJVMTest {
    long loadS2Lmask13_1(short[] sa) {
<separator>
package sampleapi.util;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double X = java.lang.Math.PI;
<separator>
public class MyJVMTest {
    void testInt() {
<separator>
public class MyJVMTest {
    long signExtractLong1(long x) {
<separator>
import javax.naming.ldap.*;
public class MyJVMTest {
<separator>
package tests.sharedclasses;
import java.io.*;
<separator>
public class MyJVMTest {
    long test_shrc1(long a) {
<separator>
import java.lang.annotation.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean failed = false;
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    void test_vi(int[] a, long[] b, int c, long d) {
<separator>
import java.util.*;
import java.awt.geom.*;
<separator>
public class MyJVMTest {
    int dummyStaticInt = 0;
<separator>
import java.time.LocalDate;
public class MyJVMTest {
<separator>
import javax.sound.sampled.*;
import com.sun.media.sound.*;
<separator>
public class MyJVMTest {
    Short foob(short i) {
<separator>
import java.io.*;
import javax.xml.parsers.*;
<separator>
public class MyJVMTest {
    void setAtoB() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(long[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_subv(char[] a0, char[] a1, char b) {
<separator>
public class MyJVMTest {
    void prodReductionInit(double[] a, double[] b) {
<separator>
import java.io.*;
import static java.lang.System.*;
<separator>
public class MyJVMTest {
    int DOUBLE_MANTISSA_LENGTH = 52;
<separator>
public class MyJVMTest {
    double errorTolerance = 1.0e-11;
<separator>
public class MyJVMTest {
    void check() {
<separator>
import java.io.BufferedReader;
import java.io.IOException;
<separator>
public class MyJVMTest {
    String osName = System.getProperty("os.name");
<separator>
public class MyJVMTest {
    int obj_size;
<separator>
public class MyJVMTest {
    String OUR_CLASS = ChainedExceptions.class.getName();
<separator>
import java.awt.*;
import javax.print.*;
<separator>
public class MyJVMTest {
    int x;
<separator>
import java.beans.PropertyChangeEvent;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String replaceFirstSubStringMatch(String range, String substr, String replacement) {
<separator>
public class MyJVMTest {
    long unchecked(long a, long b) {
<separator>
import java.math.*;
import static java.math.BigDecimal.*;
<separator>
package sax;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    short sum2(short[] a) {
<separator>
public class MyJVMTest {
    void uncaughtException(final Thread t, final Throwable e) {
<separator>
public class MyJVMTest {
    void checkSize(int actual, int expected, String prop) {
<separator>
public class MyJVMTest {
    Object m2(Object[] a2) {
<separator>
package jdk.test.lib.hprof.util;
import java.util.*;
<separator>
package simp;
import javax.imageio.metadata.IIOMetadata;
<separator>
public class MyJVMTest {
    int getDefaultPropertyIndex() {
<separator>
public class MyJVMTest {
    int test3() {
<separator>
public class MyJVMTest {
    long IIMM12_2 = 0x1001;
<separator>
public class MyJVMTest {
    byte var_1;
<separator>
public class MyJVMTest {
    void test_xora(char[] a0, char[] a1, short[] a2) {
<separator>
import java.net.*;
import javax.net.ssl.*;
<separator>
import java.lang.ref.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test(boolean cond) {
<separator>
public class MyJVMTest {
    NonJavaNames.myInterface create() {
<separator>
package compiler.linkage;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    void m(X x1, X x2) {
<separator>
public class MyJVMTest {
    int mercury() {
<separator>
package gc.hashcode.ExternalHashingTest;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp_oppos(short[] a, short[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    XorShift r = new XorShift();
<separator>
public class MyJVMTest {
    boolean testAttachOptionsSanity() {
<separator>
public class MyJVMTest {
    Class findClass(String name) throws ClassNotFoundException {
<separator>
package p;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double sqrtAdd(int i) {
<separator>
public class MyJVMTest {
    long bzhiI2L(int src1, int src2) {
<separator>
public class MyJVMTest {
    int test(int[] src, boolean flag1, boolean flag2, int stop) {
<separator>
public class MyJVMTest {
    void one() {
<separator>
public class MyJVMTest {
    float simplep2(float i, Float ib1) {
<separator>
import java.io.*;
import javax.smartcardio.*;
<separator>
public class MyJVMTest {
    String get() {
<separator>
public class MyJVMTest {
    byte summ2(byte[] a) {
<separator>
public class MyJVMTest {
    boolean threadStarted = false;
<separator>
public class MyJVMTest {
    int dontInline(int a) {
<separator>
import java.util.ResourceBundle;
import java.util.Locale;
<separator>
public class MyJVMTest {
    void computeFields() {
<separator>
public class MyJVMTest {
    int getReadOnly() {
<separator>
public class MyJVMTest {
    char initChar(String[] args, char v) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(int[] a, float[] b, int c, float d) {
<separator>
public class MyJVMTest {
    int[] m1(int[] a2) {
<separator>
public class MyJVMTest {
    Integer val = Integer.valueOf(42);
<separator>
import java.awt.Frame;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Tester_Class_2 var_128;
<separator>
import java.text.*;
public class MyJVMTest {
<separator>
import javax.management.modelmbean.*;
import java.lang.reflect.Method;
<separator>
import java.awt.AWTException;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void checkOOM(String methodName, Runnable r) {
<separator>
package compiler.profiling.unloadingconflict;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long foo(long i) {
<separator>
public class MyJVMTest {
    int test(byte[] a) {
<separator>
package com.oti.j9.exclude;
import java.util.Hashtable;
<separator>
public class MyJVMTest {
    long remi_sumb2_cond() {
<separator>
public class MyJVMTest {
    String foo(String prev) {
<separator>
public class MyJVMTest {
    A saved;
<separator>
public class MyJVMTest {
    Object getElementAt(int index) {
<separator>
public class MyJVMTest {
    int ARRLEN = 1000;
<separator>
public class MyJVMTest {
    void method(int[] array) {
<separator>
public class MyJVMTest {
    byte testp2(byte i, Byte ib1) {
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    int rotateRight(int i, int distance) {
<separator>
public class MyJVMTest {
    byte testp(byte i, Byte ib) {
<separator>
public class MyJVMTest {
    Object[] i_ref_array_par_method(Object[] obja) {
<separator>
public class MyJVMTest {
    void expect(int i, int j) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(short[] a, float[] b) {
<separator>
public class MyJVMTest {
    int newMethod() {
<separator>
public class MyJVMTest {
    String s = "bss";
<separator>
public class MyJVMTest {
    void check(byte result) throws Exception {
<separator>
package compiler.tiered;
import java.lang.reflect.Method;
<separator>
import java.io.ByteArrayOutputStream;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int simple2(int i) {
<separator>
public class MyJVMTest {
    String NETWORK_IF_LO0 = "lo0";
<separator>
public class MyJVMTest {
    String text;
<separator>
import java.math.*;
import java.util.*;
<separator>
public class MyJVMTest {
    short summ2(short[] a) {
<separator>
public class MyJVMTest {
    void test_vi_neg(short[] a, long[] b, short c, long d) {
<separator>
package com.oracle.java.testlibrary.cli.predicate;
import java.util.function.BooleanSupplier;
<separator>
public class MyJVMTest {
    double foo(double i) {
<separator>
package sun.awt.resources;
import java.util.ListResourceBundle;
<separator>
import java.lang.management.*;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    String helpMethodEntryWithStackGrow() {
<separator>
public class MyJVMTest {
    void not_inlined() throws Exception1 {
<separator>
public class MyJVMTest {
    String patchName() {
<separator>
import java.io.*;
import java.nio.file.*;
<separator>
public class MyJVMTest {
    String failure;
<separator>
public class MyJVMTest {
    boolean test_helper() {
<separator>
public class MyJVMTest {
    short var_94 = (short) 'H';
<separator>
import java.security.*;
import javax.security.auth.login.*;
<separator>
public class MyJVMTest {
    boolean test(Integer n) {
<separator>
public class MyJVMTest {
    int[] arr = new int[42];
<separator>
public class MyJVMTest {
    void test_2ci_neg(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    void call() {
<separator>
public class MyJVMTest {
    boolean veto;
<separator>
public class MyJVMTest {
    int prodInt(int[] a1, int[] a2, int[] a3) {
<separator>
public class MyJVMTest {
    <T> boolean isOKAgain(T x) {
<separator>
public class MyJVMTest {
    String LO0HOSTADDRESS = "0:0:0:0:0:0:0:1%lo0";
<separator>
public class MyJVMTest {
    void go(String what, Object[] fs) throws Exception {
<separator>
import javax.management.*;
import javax.management.remote.*;
<separator>
public class MyJVMTest {
    byte remi_summ2() {
<separator>
import java.security.Policy;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    float remi_sum() {
<separator>
public class MyJVMTest {
    short foo(short i) {
<separator>
import javax.sound.midi.*;
import javax.sound.sampled.*;
<separator>
public class MyJVMTest {
    void processArrays(boolean expectNulls, Object[] nulla, Object[][] nullaa) {
<separator>
public class MyJVMTest {
    boolean s_afterBothEvents = false;
<separator>
public class MyJVMTest {
    boolean running = false;
<separator>
public class MyJVMTest {
    String m(Number n) {
<separator>
public class MyJVMTest {
    String optLevel;
<separator>
public class MyJVMTest {
    void test_cp(short[] a, short[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    int m_helper(int i, int i3, int i4) {
<separator>
public class MyJVMTest {
    String rightJustify(long n) {
<separator>
public class MyJVMTest {
    CancellableTimer timer;
<separator>
public class MyJVMTest {
    byte remi_sump2(Byte j1) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(float[] a, float b) {
<separator>
public class MyJVMTest {
    int fifteen() {
<separator>
public class MyJVMTest {
    Tester prev;
<separator>
import java.util.zip.*;
import java.util.jar.*;
<separator>
package common;
import java.util.List;
<separator>
import java.util.*;
import java.awt.event.*;
<separator>
public class MyJVMTest {
    void test_xorv(char[] a0, char[] a1, short b) {
<separator>
import java.lang.*;
import java.util.*;
<separator>
import static java.lang.reflect.Modifier.*;
public class MyJVMTest {
<separator>
package stream.XMLStreamWriterTest;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int barrier;
<separator>
package com.ibm.jvmti.tests.eventException;
public class MyJVMTest {
<separator>
import java.security.InvalidKeyException;
public class MyJVMTest {
<separator>
import java.util.concurrent.*;
import javax.swing.*;
<separator>
public class MyJVMTest {
    String getString() {
<separator>
import java.util.*;
import static java.util.ResourceBundle.Control.*;
<separator>
public class MyJVMTest {
    long loadB2L_mask8_1(byte[] ba) {
<separator>
public class MyJVMTest {
    long remi_sump(Long j) {
<separator>
public class MyJVMTest {
    Class<?> forName6() {
<separator>
public class MyJVMTest {
    byte[] SALT;
<separator>
public class MyJVMTest {
    byte[] getDst() {
<separator>
public class MyJVMTest {
    void test_2ci_inv(char[] a, char[] b, int k) {
<separator>
package jdk.test.lib.cli.predicate;
import java.util.function.BooleanSupplier;
<separator>
public class MyJVMTest {
    void test(int i) {
<separator>
public class MyJVMTest {
    double method2() {
<separator>
import java.util.function.*;
import java.util.*;
<separator>
public class MyJVMTest {
    float remi_sump2(Float j1) {
<separator>
public class MyJVMTest {
    String getID() {
<separator>
package org.openjdk.bench.java.util.stream.tasks.PrimesFilter;
import java.util.ArrayList;
<separator>
public class MyJVMTest {
    float remi_sum2_cond() {
<separator>
package util;
import java.sql.RowId;
<separator>
public class MyJVMTest {
    int testb(int i) {
<separator>
public class MyJVMTest {
    void test_ci(short[] a, long[] b) {
<separator>
import java.lang.IndexOutOfBoundsException;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int errorCount = 0;
<separator>
public class MyJVMTest {
    long blsrq(long src1) {
<separator>
public class MyJVMTest {
    int fint(long l) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(short[] a, short b) {
<separator>
public class MyJVMTest {
    void test_unrl_init(double[] a0) {
<separator>
public class MyJVMTest {
    int a;
<separator>
public class MyJVMTest {
    void checkValue(String msg, String got, String expected) {
<separator>
public class MyJVMTest {
    long sump2(long[] a, Long result2) {
<separator>
public class MyJVMTest {
    boolean isPrint(int ch) {
<separator>
public class MyJVMTest {
    <T, U extends T, V extends T> T cond1(boolean z, U x1, V x2) {
<separator>
import java.security.*;
import java.security.Provider.*;
<separator>
public class MyJVMTest {
    void checkKey(String key) throws Exception {
<separator>
public class MyJVMTest {
    String bar(String s) {
<separator>
public class MyJVMTest {
    String constr = "1111xx1x";
<separator>
import javax.swing.*;
import java.io.*;
<separator>
public class MyJVMTest {
    int IIMM12_2 = 0x1001;
<separator>
package vm.mlvm.meth.share;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    int lzcomp(long l) {
<separator>
public class MyJVMTest {
    void foo(Integer i) {
<separator>
import java.util.concurrent.*;
import javax.management.*;
<separator>
public class MyJVMTest {
    void setRandomP(final double[] p, final int n, java.util.Random r) {
<separator>
public class MyJVMTest {
    A a;
<separator>
public class MyJVMTest {
    String test() {
<separator>
public class MyJVMTest {
    long sump(long[] a, Long result) {
<separator>
public class MyJVMTest {
    void exit(String error) {
<separator>
public class MyJVMTest {
    String Greeting() {
<separator>
public class MyJVMTest {
    int step1 = 0;
<separator>
import java.security.cert.CertPathParameters;
import java.security.cert.CertPathBuilderResult;
<separator>
public class MyJVMTest {
    long sleepms(long millis) throws InterruptedException {
<separator>
public class MyJVMTest {
    boolean isResultAvailable;
<separator>
public class MyJVMTest {
    boolean test_isGtC(float a) {
<separator>
package com.sun.swingset3.demos;
import java.awt.*;
<separator>
public class MyJVMTest {
    int andnl(int src1, int src2) {
<separator>
public class MyJVMTest {
    int test_sum(int[] a1) {
<separator>
public class MyJVMTest {
    void test_2ci_oppos(boolean[] a, boolean[] b) {
<separator>
public class MyJVMTest {
    int test_shlc33(int a) {
<separator>
package j9vm.test.hashCode;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double sumReductionImplement(double[] a, double[] b, double[] c, double[] d, double total) {
<separator>
public class MyJVMTest {
    Object[] s_ref_array_par_method(Object[] obja) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(int[] a, double[] b) {
<separator>
public class MyJVMTest {
    int testRoundtrip() {
<separator>
public class MyJVMTest {
    StringBuilder sb = new StringBuilder();
<separator>
public class MyJVMTest {
    int saturn(int x, int y) {
<separator>
public class MyJVMTest {
    Integer m(X x) {
<separator>
package org.banana;
import java.io.Reader;
<separator>
public class MyJVMTest {
    int sum;
<separator>
public class MyJVMTest {
    void checkNulls() throws Exception {
<separator>
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
<separator>
public class MyJVMTest {
    void test_anda(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    boolean thread_started = false;
<separator>
public class MyJVMTest {
    int run() {
<separator>
import java.util.*;
import static java.util.Calendar.*;
<separator>
public class MyJVMTest {
    void check(Object x, Object y) throws Exception {
<separator>
import javax.management.*;
import java.util.concurrent.*;
<separator>
public class MyJVMTest {
    int previousSpaceIndex(CharSequence sb, int seek) {
<separator>
public class MyJVMTest {
    void test_addi(long[] a0, long[] a1) {
<separator>
public class MyJVMTest {
    double prodReductionImplement(double[] a, double[] b, double total) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(long[] a, long[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    void checkCurrentTimeMillis(long diff) {
<separator>
public class MyJVMTest {
    boolean test_isGt(long a, long b) {
<separator>
package nsk.stress.thread;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean isEven(long n) {
<separator>
public class MyJVMTest {
    int BIT_MASK = 0xB731;
<separator>
import javax.net.ssl.*;
import java.net.*;
<separator>
public class MyJVMTest {
    int recurse(long a, long b, long c) {
<separator>
public class MyJVMTest {
    int lzcomp(int i) {
<separator>
public class MyJVMTest {
    boolean test_isEqC(long a) {
<separator>
public class MyJVMTest {
    int testp(int i, Integer ib) {
<separator>
public class MyJVMTest {
    boolean useAAHints;
<separator>
public class MyJVMTest {
    int test(Class<?> type, String property, boolean value) {
<separator>
public class MyJVMTest {
    boolean eq(Object x, Object y) {
<separator>
public class MyJVMTest {
    void methodToDelete() {
<separator>
public class MyJVMTest {
    int k, m, n;
<separator>
public class MyJVMTest {
    int test2(int i, int limit) {
<separator>
public class MyJVMTest {
    byte[] getBytes(String in) {
<separator>
public class MyJVMTest {
    int depth = 0;
<separator>
public class MyJVMTest {
    void test2() {
<separator>
package nsk.stress.numeric.numeric009;
public class MyJVMTest {
<separator>
package test;
import java.lang.annotation.*;
<separator>
public class MyJVMTest {
    void test_vi_oppos(short[] a, int[] b, short c, int d) {
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b, double[] c, double[] d) {
<separator>
import java.security.Principal;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void fail(Exception x) {
<separator>
public class MyJVMTest {
    int v = 0;
<separator>
package jdk.nashorn.test.tools;
public class MyJVMTest {
<separator>
import java.util.*;
import javax.crypto.*;
<separator>
package wsgen;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long sum(long[] a) {
<separator>
public class MyJVMTest {
    void __BAR__() throws PongException {
<separator>
public class MyJVMTest {
    short remi_sumb_cond() {
<separator>
public class MyJVMTest {
    void test1() {
<separator>
public class MyJVMTest {
    boolean isDivisibleByThree(int n) {
<separator>
public class MyJVMTest {
    void check_float(int[] result, float f1, float f2) {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(byte[] a, byte[] b, byte c, byte d) {
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, long[] b, byte c, long d) {
<separator>
public class MyJVMTest {
    void assertEquals(int expected, int real) throws Exception {
<separator>
package compiler.runtime;
import java.util.*;
<separator>
public class MyJVMTest {
    boolean[] getSubjectUniqueID() {
<separator>
public class MyJVMTest {
    void test_vi_neg(float[] a, double[] b, float c, double d) {
<separator>
public class MyJVMTest {
    java.lang.invoke.MethodHandle getNamedMember;
<separator>
public class MyJVMTest {
    TestNestedLocksElimination getHolder(TestNestedLocksElimination s1, TestNestedLocksElimination s2, int count) {
<separator>
public class MyJVMTest {
    Class<?>[] reset(Class<?>[] array) {
<separator>
public class MyJVMTest {
    int first = 1;
<separator>
public class MyJVMTest {
    void indexOfStringIntNull() {
<separator>
public class MyJVMTest {
    long test_and(long a, long b) {
<separator>
public class MyJVMTest {
    int tzcomp(long l) {
<separator>
public class MyJVMTest {
    java.lang.Object m\u20ac\u00a3a(java.lang.Object s) {
<separator>
public class MyJVMTest {
    void test_vi(char[] a, short[] b, char c, short d) {
<separator>
public class MyJVMTest {
    V put(K key, V value) {
<separator>
public class MyJVMTest {
    void test_cp_neg(int[] a, int[] b) {
<separator>
import java.awt.geom.AffineTransform;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void callingMethod(final String parameter) {
<separator>
public class MyJVMTest {
    double simplep2(double i, Double ib1) {
<separator>
import java.awt.geom.Area;
public class MyJVMTest {
<separator>
import javax.accessibility.Accessible;
import javax.accessibility.AccessibleContext;
<separator>
public class MyJVMTest {
    String NATIVE_LIBRARY_NAME1 = "j9offjnitest26";
<separator>
public class MyJVMTest {
    boolean isAscii(char c) {
<separator>
public class MyJVMTest {
    int f(String s, int a, int b) {
<separator>
public class MyJVMTest {
    long checkSum(int[] a) {
<separator>
package jdk.internal.net.http.websocket;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long _loadB2L_mask8(byte[] ba) {
<separator>
public class MyJVMTest {
    void singleChar2() {
<separator>
public class MyJVMTest {
    int safeMethod(int x, int y) {
<separator>
public class MyJVMTest {
    void testChar(char a, char b) {
<separator>
public class MyJVMTest {
    void verify(String text, int ref, int actual) {
<separator>
public class MyJVMTest {
    boolean checkIPv6PrefixLength(int prefix) {
<separator>
public class MyJVMTest {
    void sumReductionInit(int[] a, int[] b, int[] c) {
<separator>
public class MyJVMTest {
    int compUnsigned(int x, int y) {
<separator>
public class MyJVMTest {
    void test_vi(char[] a, char b) {
<separator>
public class MyJVMTest {
    void testInferenceVerifier() {
<separator>
import java.security.cert.*;
import java.io.ByteArrayInputStream;
<separator>
public class MyJVMTest {
    void test_vi_neg(long[] a, double[] b, long c, double d) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(int[] a, int[] b, int c, int d, int k) {
<separator>
public class MyJVMTest {
    String blah = "NONE";
<separator>
public class MyJVMTest {
    boolean debug = true;
<separator>
public class MyJVMTest {
    void reset() {
<separator>
public class MyJVMTest {
    void checkClippedString(String str, String res, String golden) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(short[] a, double[] b, short c, double d) {
<separator>
public class MyJVMTest {
    void test_cp(long[] a, long[] b) {
<separator>
public class MyJVMTest {
    String r(String s) {
<separator>
public class MyJVMTest {
    Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6, Object arg7, Object arg8, Object arg9, Object arg10, Object arg11, Object arg12, Object arg13, Object arg14, Object arg15, Object arg16, Object arg17, Object arg18, Object arg19, Object arg20, Object arg21, Object arg22, Object arg23, Object arg24, Object arg25, Object arg26, Object arg27, Object arg28, Object arg29, Object arg30, Object arg31, Object arg32, Object arg33, Object arg34, Object arg35, Object arg36, Object arg37, Object arg38, Object arg39, Object arg40, Object arg41, Object arg42, Object arg43, Object arg44, Object arg45, Object arg46, Object arg47, Object arg48, Object arg49, Object arg50, Object arg51, Object arg52, Object arg53, Object arg54, Object arg55, Object arg56, Object arg57, Object arg58, Object arg59, Object arg60, Object arg61, Object arg62, Object arg63, Object arg64, Object arg65, Object arg66, Object arg67, Object arg68, Object arg69, Object arg70, Object arg71, Object arg72, Object arg73, Object arg74, Object arg75, Object arg76, Object arg77, Object arg78, Object arg79, Object arg80, Object arg81, Object arg82, Object arg83, Object arg84, Object arg85, Object arg86, Object arg87, Object arg88, Object arg89, Object arg90, Object arg91, Object arg92, Object arg93, Object arg94, Object arg95, Object arg96, Object arg97, Object arg98, Object arg99, Object arg100, Object arg101, Object arg102, Object arg103, Object arg104, Object arg105, Object arg106, Object arg107, Object arg108, Object arg109, Object arg110, Object arg111, Object arg112, Object arg113, Object arg114, Object arg115, Object arg116, Object arg117, Object arg118, Object arg119, Object arg120, Object arg121, Object arg122, Object arg123, Object arg124, Object arg125, Object arg126, Object arg127, Object arg128, Object arg129, Object arg130, Object arg131, Object arg132, Object arg133, Object arg134, Object arg135, Object arg136, Object arg137, Object arg138, Object arg139, Object arg140, Object arg141, Object arg142, Object arg143, Object arg144, Object arg145, Object arg146, Object arg147, Object arg148, Object arg149, Object arg150, Object arg151, Object arg152, Object arg153, Object arg154, Object arg155, Object arg156, Object arg157, Object arg158, Object arg159, Object arg160, Object arg161, Object arg162, Object arg163, Object arg164, Object arg165, Object arg166, Object arg167, Object arg168, Object arg169, Object arg170, Object arg171, Object arg172, Object arg173, Object arg174, Object arg175, Object arg176, Object arg177, Object arg178, Object arg179, Object arg180, Object arg181, Object arg182, Object arg183, Object arg184, Object arg185, Object arg186, Object arg187, Object arg188, Object arg189, Object arg190, Object arg191, Object arg192, Object arg193, Object arg194, Object arg195, Object arg196, Object arg197, Object arg198, Object arg199, Object arg200, Object arg201, Object arg202, Object arg203, Object arg204, Object arg205, Object arg206, Object arg207, Object arg208, Object arg209, Object arg210, Object arg211, Object arg212, Object arg213, Object arg214, Object arg215, Object arg216, Object arg217, Object arg218, Object arg219, Object arg220, Object arg221, Object arg222, Object arg223, Object arg224, Object arg225, Object arg226, Object arg227, Object arg228, Object arg229, Object arg230, Object arg231, Object arg232, Object arg233, Object arg234, Object arg235, Object arg236, Object arg237, Object arg238, Object arg239, Object arg240, Object arg241, Object arg242, Object arg243, Object arg244, Object arg245, Object arg246, Object arg247, Object arg248, Object arg249) {
<separator>
public class MyJVMTest {
    Runnable[] r;
<separator>
package org.openj9.test.java.lang.invoke.helpers;
import java.lang.invoke.*;
<separator>
import javax.sound.midi.Instrument;
public class MyJVMTest {
<separator>
package jdk.jfr.event.io;
import java.util.Set;
<separator>
public class MyJVMTest {
    boolean bFld = false;
<separator>
public class MyJVMTest {
    E[] elements;
<separator>
public class MyJVMTest {
    boolean test_isLt(long a, long b) {
<separator>
public class MyJVMTest {
    int staticInt = 0xBEBE;
<separator>
public class MyJVMTest {
    String s = "cs";
<separator>
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, short[] b, byte c, short d) {
<separator>
public class MyJVMTest {
    float sum2(float[] a) {
<separator>
public class MyJVMTest {
    Object bar(int i) {
<separator>
public class MyJVMTest {
    String getValue() {
<separator>
public class MyJVMTest {
    void ReductionInit(int[] a1, int[] a2, int[] a3, long[] b1, long[] b2, long[] b3, float[] c1, float[] c2, float[] c3, double[] d1, double[] d2, double[] d3) {
<separator>
public class MyJVMTest {
    <S extends Readable & AutoCloseable, T extends Appendable & AutoCloseable> void copy(S s, T t, int size) throws Exception {
<separator>
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
<separator>
public class MyJVMTest {
    int test_andc2(int a) {
<separator>
public class MyJVMTest {
    void m0(Object[] o) {
<separator>
public class MyJVMTest {
    long testRorOrLong63Or(long val) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(long[] a, long b) {
<separator>
public class MyJVMTest {
    void testud() {
<separator>
public class MyJVMTest {
    void test_cp_inv(double[] a, double[] b, int k) {
<separator>
public class MyJVMTest {
    int f(String s, Number... args) {
<separator>
public class MyJVMTest {
    byte[] corruptGCM(byte[] ct) {
<separator>
public class MyJVMTest {
    int canonicalDigit(int ch, int radix) {
<separator>
public class MyJVMTest {
    void test_srlv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    int f(String s, Object... args) {
<separator>
public class MyJVMTest {
    O o;
<separator>
public class MyJVMTest {
    int getVersion() {
<separator>
import org.w3c.dom.Node;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Object var_18;
<separator>
public class MyJVMTest {
    double simple2(double i) {
<separator>
public class MyJVMTest {
    int getReadWrite3() {
<separator>
public class MyJVMTest {
    boolean checkIPv4PrefixLength(int prefix) {
<separator>
public class MyJVMTest {
    void test_unrl_addi(double[] a0, double[] a1) {
<separator>
package j9vm.test.arraycopy;
public class MyJVMTest {
<separator>
package org.openj9.test.java.security;
import java.security.PrivilegedExceptionAction;
<separator>
import java.lang.*;
public class MyJVMTest {
<separator>
import java.util.Iterator;
import javax.imageio.ImageIO;
<separator>
public class MyJVMTest {
    byte remi_sumb() {
<separator>
public class MyJVMTest {
    double[] reset(double[] array) {
<separator>
public class MyJVMTest {
    void statementBroken(int i) {
<separator>
public class MyJVMTest {
    long[] s_prim_array_par_method(long[] la) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, char elem, char val) {
<separator>
public class MyJVMTest {
    int stop = 100;
<separator>
import java.nio.*;
import java.nio.channels.*;
<separator>
import java.nio.channels.Selector;
public class MyJVMTest {
<separator>
import java.io.PrintWriter;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci(float[] a) {
<separator>
public class MyJVMTest {
    float foo(float i) {
<separator>
public class MyJVMTest {
    int errorCount;
<separator>
public class MyJVMTest {
    void test_vi_inv(float[] a, float b, int k) {
<separator>
public class MyJVMTest {
    Double ibc = new Double(1.);
<separator>
public class MyJVMTest {
    int[] x = new int[1];
<separator>
public class MyJVMTest {
    long testRorOrLong63(long val) {
<separator>
public class MyJVMTest {
    int vMeth() {
<separator>
public class MyJVMTest {
    boolean isImageStarted = false;
<separator>
public class MyJVMTest {
    void test_helper(int stop, boolean[] flags1, boolean flag2) {
<separator>
public class MyJVMTest {
    long simpleb(long i) {
<separator>
public class MyJVMTest {
    String getFormat() {
<separator>
public class MyJVMTest {
    void test_pack4(long[] p4, char[] a1) {
<separator>
public class MyJVMTest {
    void padV15(byte[] padded) {
<separator>
import java.util.stream.Stream;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String transform(String name) {
<separator>
public class MyJVMTest {
    byte[] array;
<separator>
public class MyJVMTest {
    double remi_sump2(Double j1) {
<separator>
public class MyJVMTest {
    boolean test_isGeC(float a) {
<separator>
package stream.XMLStreamFilterTest;
import javax.xml.stream.EventFilter;
<separator>
public class MyJVMTest {
    Class<?> getLocalClass() {
<separator>
public class MyJVMTest {
    Object run() {
<separator>
public class MyJVMTest {
    int SetOptions(String options) {
<separator>
public class MyJVMTest {
    void checkPoint() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(long[] a, double[] b, long c, double d) {
<separator>
public class MyJVMTest {
    void clearTest() throws Exception {
<separator>
package custom;
import java.time.ZoneId;
<separator>
public class MyJVMTest {
    int getInt() {
<separator>
public class MyJVMTest {
    int test1() {
<separator>
public class MyJVMTest {
    Object run() throws Exception {
<separator>
public class MyJVMTest {
    Runnable r;
<separator>
public class MyJVMTest {
    int f4() {
<separator>
public class MyJVMTest {
    Integer foo(int i) {
<separator>
public class MyJVMTest {
    String u = "bsu";
<separator>
import java.lang.management.*;
import java.util.concurrent.*;
<separator>
public class MyJVMTest {
    long testRorOrLong63And(long val) {
<separator>
public class MyJVMTest {
    void zoo() {
<separator>
public class MyJVMTest {
    int simpleb2(int i) {
<separator>
public class MyJVMTest {
    String helpInlinedSyncDecompile() {
<separator>
public class MyJVMTest {
    int[] array = new int[5];
<separator>
public class MyJVMTest {
    long testp2(long i, Long ib1) {
<separator>
public class MyJVMTest {
    void f(final int i) throws Exception {
<separator>
import java.awt.*;
import java.text.*;
<separator>
public class MyJVMTest {
    boolean out(String c) {
<separator>
import com.sun.net.httpserver.*;
import java.net.*;
<separator>
public class MyJVMTest {
    String helpVmDump() {
<separator>
public class MyJVMTest {
    Counter initialState;
<separator>
public class MyJVMTest {
    String m() {
<separator>
public class MyJVMTest {
    double pause2(double x) {
<separator>
import java.awt.Rectangle;
import java.awt.geom.Area;
<separator>
public class MyJVMTest {
    void test_vi_oppos(short[] a, long[] b, short c, long d) {
<separator>
public class MyJVMTest {
    int count = 0;
<separator>
public class MyJVMTest {
    int testRorOrInt16Eon(int val) {
<separator>
public class MyJVMTest {
    long sumb(long[] a) {
<separator>
import java.util.concurrent.Callable;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean[] reset(boolean[] array) {
<separator>
public class MyJVMTest {
    boolean isCellEditable(int row, int col) {
<separator>
public class MyJVMTest {
    int bucketsInuse(Object[] exceptionTable) {
<separator>
public class MyJVMTest {
    int constant() {
<separator>
public class MyJVMTest {
    B[] b = new B[10];
<separator>
public class MyJVMTest {
    float sump2(float[] a, Float result2) {
<separator>
public class MyJVMTest {
    int compare(String x, String y) {
<separator>
import java.util.Locale;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    <T> int size(T4695847<T> bt) {
<separator>
public class MyJVMTest {
    int checkMethod(int value) {
<separator>
public class MyJVMTest {
    void test_unpack2_swap(int[] a0, long[] p2) {
<separator>
import java.lang.reflect.*;
import java.io.*;
<separator>
public class MyJVMTest {
    int m2() {
<separator>
public class MyJVMTest {
    double remi_sum() {
<separator>
public class MyJVMTest {
    byte b;
<separator>
public class MyJVMTest {
    int DEF_TIME_MAX = 30;
<separator>
public class MyJVMTest {
    void test6() {
<separator>
import java.util.logging.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int sideEffect = 0;
<separator>
public class MyJVMTest {
    Integer i = 0;
<separator>
public class MyJVMTest {
    String build(final Object index) {
<separator>
public class MyJVMTest {
    void test_2ci_inv(long[] a, long[] b, int k) {
<separator>
public class MyJVMTest {
    void close() {
<separator>
public class MyJVMTest {
    void sumReductionInit(double[] a, double[] b, double[] c) {
<separator>
public class MyJVMTest {
    long mulReductionImplement(long[] a, long[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    int num;
<separator>
public class MyJVMTest {
    void test_addi(short[] a0, short[] a1) {
<separator>
public class MyJVMTest {
    boolean isUpper(int ch) {
<separator>
public class MyJVMTest {
    void booleanInvert(final int max) {
<separator>
public class MyJVMTest {
    int sump2(int[] a, Integer result2) {
<separator>
public class MyJVMTest {
    boolean waitForThreadStop(Thread t) {
<separator>
public class MyJVMTest {
    Object sink;
<separator>
import static java.awt.image.BufferedImage.*;
import java.awt.Graphics2D;
<separator>
public class MyJVMTest {
    void THROW(final Throwable t) {
<separator>
public class MyJVMTest {
    int Runner() {
<separator>
public class MyJVMTest {
    void testfl() {
<separator>
public class MyJVMTest {
    void writeU32(byte[] data, int pos, int value) {
<separator>
public class MyJVMTest {
    byte remi_sumb2() {
<separator>
public class MyJVMTest {
    String wahoo(int x) {
<separator>
public class MyJVMTest {
    int optionLength(String option) {
<separator>
public class MyJVMTest {
    int operation(int p1, int p2) {
<separator>
package compiler.arraycopy;
import java.lang.invoke.*;
<separator>
import java.util.function.Function;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String helpMethodExitFromJava() {
<separator>
package jdk.jfr.event.runtime;
import java.util.concurrent.CountDownLatch;
<separator>
public class MyJVMTest {
    void test(long one, long two) {
<separator>
public class MyJVMTest {
    String packageField;
<separator>
public class MyJVMTest {
    int counter = 0;
<separator>
public class MyJVMTest {
    String[] KEYS = { "ColorChooser.okText", "ColorChooser.cancelText", "ColorChooser.resetText", "ColorChooser.resetMnemonic", "ColorChooser.swatchesNameText", "ColorChooser.swatchesMnemonic", "ColorChooser.swatchesSwatchSize", "ColorChooser.swatchesRecentText", "ColorChooser.swatchesRecentSwatchSize", "ColorChooser.hsvNameText", "ColorChooser.hsvMnemonic", "ColorChooser.hsvHueText", "ColorChooser.hsvSaturationText", "ColorChooser.hsvValueText", "ColorChooser.hsvTransparencyText", "ColorChooser.hslNameText", "ColorChooser.hslMnemonic", "ColorChooser.hslHueText", "ColorChooser.hslSaturationText", "ColorChooser.hslLightnessText", "ColorChooser.hslTransparencyText", "ColorChooser.rgbNameText", "ColorChooser.rgbMnemonic", "ColorChooser.rgbRedText", "ColorChooser.rgbGreenText", "ColorChooser.rgbBlueText", "ColorChooser.rgbAlphaText", "ColorChooser.rgbHexCodeText", "ColorChooser.rgbHexCodeMnemonic", "ColorChooser.cmykNameText", "ColorChooser.cmykMnemonic", "ColorChooser.cmykCyanText", "ColorChooser.cmykMagentaText", "ColorChooser.cmykYellowText", "ColorChooser.cmykBlackText", "ColorChooser.cmykAlphaText" };
<separator>
package gc.epsilon;
import java.lang.management.GarbageCollectorMXBean;
<separator>
public class MyJVMTest {
    void test_vi_inv(double[] a, double b, int k) {
<separator>
import javax.swing.*;
import java.awt.event.*;
<separator>
import java.rmi.MarshalledObject;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    java.beans.PropertyChangeListener listener = new java.beans.PropertyChangeListener() {
<separator>
import java.lang.invoke.*;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    int getMercury() {
<separator>
public class MyJVMTest {
    String lastFailure;
<separator>
public class MyJVMTest {
    long checkMethod(long value) {
<separator>
public class MyJVMTest {
    int testRorOrInt16Or(int val) {
<separator>
public class MyJVMTest {
    int[] iArrFld = new int[400];
<separator>
public class MyJVMTest {
    String method2(final String arg) {
<separator>
public class MyJVMTest {
    double add(double x, double y) {
<separator>
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.DataFlavor;
<separator>
import java.awt.Color;
import java.awt.Graphics;
<separator>
public class MyJVMTest {
    String test(int i) {
<separator>
package jdk.internal.net.http;
public class MyJVMTest {
<separator>
package test;
import java.io.*;
<separator>
public class MyJVMTest {
    void __BAR__() throws PingException {
<separator>
package nsk.stress.numeric.numeric010;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long testRorOrLong16Or(long val) {
<separator>
public class MyJVMTest {
    long longs;
<separator>
public class MyJVMTest {
    short simplem2(short i) {
<separator>
import java.io.*;
import javax.print.*;
<separator>
public class MyJVMTest {
    int test_ushrc33(int a) {
<separator>
public class MyJVMTest {
    void howMany(int k) {
<separator>
public class MyJVMTest {
    int test_orc1(int a) {
<separator>
public class MyJVMTest {
    void check_d2l(long expect) {
<separator>
import java.applet.*;
import java.awt.*;
<separator>
public class MyJVMTest {
    void test_ci_inv(double[] a, int k) {
<separator>
package compiler.intrinsics.klass;
import java.util.concurrent.Callable;
<separator>
public class MyJVMTest {
    void test_cp_neg(int[] a, int[] b, float[] c, float[] d) {
<separator>
package compiler.c2;
import java.io.PrintStream;
<separator>
import java.io.BufferedReader;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long test_mulc2(long a) {
<separator>
public class MyJVMTest {
    Object test(int arg) {
<separator>
import java.util.*;
import java.util.concurrent.atomic.*;
<separator>
public class MyJVMTest {
    void test_ci(byte[] a, int[] b) {
<separator>
public class MyJVMTest {
    float simpleb(float i) {
<separator>
public class MyJVMTest {
    void m() throws Exception {
<separator>
public class MyJVMTest {
    long start_time;
<separator>
public class MyJVMTest {
    void test_divv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    void assertEquals(int actual, int expected) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(short[] a, long[] b) {
<separator>
public class MyJVMTest {
    String AGENT_LIB = "SuspendWithObjectMonitorWait";
<separator>
import java.beans.ExceptionListener;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
<separator>
import java.util.Set;
import java.util.function.Predicate;
<separator>
public class MyJVMTest {
    <T> boolean isNoMoreOK(T x) {
<separator>
public class MyJVMTest {
    float remi_sumb2_cond() {
<separator>
public class MyJVMTest {
    String getString(byte b) {
<separator>
public class MyJVMTest {
    Runnable r = () -> {
<separator>
public class MyJVMTest {
    int blsil(int src1) {
<separator>
import java.security.*;
import java.security.interfaces.*;
<separator>
public class MyJVMTest {
    int test1(int div, int[] array) {
<separator>
public class MyJVMTest {
    byte simplep2(byte i, Byte ib1) {
<separator>
public class MyJVMTest {
    long testRorOrLong1Orn(long val) {
<separator>
package compiler.arraycopy;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void Fail(String message) {
<separator>
public class MyJVMTest {
    String bbb() {
<separator>
public class MyJVMTest {
    int testRorOrInt31And(int val) {
<separator>
public class MyJVMTest {
    <T> void checkResult(String msg, T got, T expected) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(float[] a, float[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    String testName;
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToChar(Double value) {
<separator>
package tests.sharedclasses;
import java.util.*;
<separator>
package com.oracle.java.testlibrary;
import com.sun.management.HotSpotDiagnosticMXBean;
<separator>
package jdk.test.resources.eu;
import java.util.ListResourceBundle;
<separator>
public class MyJVMTest {
    short simple(short i) {
<separator>
import java.util.List;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Test_ia32[] _tests;
<separator>
public class MyJVMTest {
    int superMethod() {
<separator>
public class MyJVMTest {
    boolean test_isLeC(float a) {
<separator>
public class MyJVMTest {
    Object doFloorDiv(long x, long y) {
<separator>
public class MyJVMTest {
    Thread t1, t2;
<separator>
public class MyJVMTest {
    String print(short arg) {
<separator>
public class MyJVMTest {
    double checkSum(double[] a) {
<separator>
public class MyJVMTest {
    void test(String expected, String actual) {
<separator>
public class MyJVMTest {
    long counter = 0;
<separator>
public class MyJVMTest {
    long testRorOrLong1(long val) {
<separator>
public class MyJVMTest {
    int[] ia = new int[] { -1 };
<separator>
public class MyJVMTest {
    void test_cp_oppos(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    int test_or(int a, int b) {
<separator>
public class MyJVMTest {
    String errMsg;
<separator>
public class MyJVMTest {
    int fourProperty() {
<separator>
package nsk.stress.numeric.numeric001;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    Class<?> clazz;
<separator>
public class MyJVMTest {
    int emptyReturn() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(int[] a, float[] b) {
<separator>
import java.util.Locale;
import java.util.TimeZone;
<separator>
public class MyJVMTest {
    String getPolinomTXT(final double[] p) {
<separator>
public class MyJVMTest {
    int getStartOffset() {
<separator>
public class MyJVMTest {
    boolean test4_taken;
<separator>
package jdk.test.lib.jfr;
import java.util.ArrayList;
<separator>
public class MyJVMTest {
    int orReductionImplement(int[] a, int[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    void sleep(long millis) {
<separator>
public class MyJVMTest {
    void test_ci_neg(int[] a, double[] b) {
<separator>
public class MyJVMTest {
    C getC() {
<separator>
package jdk.jfr.event.runtime;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double getRate() {
<separator>
public class MyJVMTest {
    int i1;
<separator>
public class MyJVMTest {
    long s_long_par_method(long l) {
<separator>
public class MyJVMTest {
    int i = 5;
<separator>
public class MyJVMTest {
    boolean bo0;
<separator>
public class MyJVMTest {
    void test_unrl_addi(long[] a0, long[] a1) {
<separator>
package jit.test.tr.loopReplicator;
import java.io.*;
<separator>
public class MyJVMTest {
    double testb2(double f, int i) {
<separator>
public class MyJVMTest {
    void unbalancedMonenter(Object object) {
<separator>
public class MyJVMTest {
    int modulus;
<separator>
public class MyJVMTest {
    boolean loadLib(String libName) {
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a, short[] b) {
<separator>
import static java.util.Calendar.*;
public class MyJVMTest {
<separator>
package TestPkg;
import java.lang.invoke.LambdaConversionException;
<separator>
public class MyJVMTest {
    void invertPriority() {
<separator>
package jdk.testlibrary;
import java.util.Objects;
<separator>
public class MyJVMTest {
    int testRorOrInt31Or(int val) {
<separator>
public class MyJVMTest {
    long remi_sumb_cond() {
<separator>
public class MyJVMTest {
    Y y = new Y();
<separator>
import java.io.*;
import java.lang.management.*;
<separator>
package stream.XMLInputFactoryTest;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String getName() {
<separator>
public class MyJVMTest {
    long testRorOrLong16Eor(long val) {
<separator>
import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
<separator>
import javax.security.auth.kerberos.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double remi_summ2_cond() {
<separator>
public class MyJVMTest {
    void testp() {
<separator>
public class MyJVMTest {
    void error(String msg, Throwable tble) {
<separator>
public class MyJVMTest {
    int test(boolean flag, int[] array2, boolean flag2, int start, int stop) {
<separator>
import javax.annotation.processing.ProcessingEnvironment;
public class MyJVMTest {
<separator>
import java.io.*;
import java.io.*;
<separator>
import javax.crypto.*;
import javax.crypto.spec.*;
<separator>
import java.awt.*;
import java.awt.dnd.*;
<separator>
import java.awt.Dialog;
public class MyJVMTest {
<separator>
package nsk.monitoring.share;
import java.util.*;
<separator>
public class MyJVMTest {
    void test_ci_oppos(long[] a) {
<separator>
package nsk.stress.numeric.numeric005;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_init(byte[] a0) {
<separator>
package optionsvalidation;
import java.lang.ref.WeakReference;
<separator>
public class MyJVMTest {
    long andReductionImplement(long[] a, long[] b, long[] c, long[] d) {
<separator>
import javax.swing.*;
import javax.swing.*;
<separator>
public class MyJVMTest {
    void test_cp_oppos(long[] a, long[] b) {
<separator>
package test.rowset.filteredrowset;
import javax.sql.RowSet;
<separator>
public class MyJVMTest {
    long sumLong(long[] b1, long[] b2, long[] b3) {
<separator>
public class MyJVMTest {
    void f() {
<separator>
public class MyJVMTest {
    A head;
<separator>
import java.io.*;
import javax.annotation.processing.*;
<separator>
import java.lang.ref.WeakReference;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void moo() {
<separator>
public class MyJVMTest {
    I2 get() {
<separator>
public class MyJVMTest {
    void test_2ci_inv(short[] a, short[] b, int k) {
<separator>
public class MyJVMTest {
    void verify(int max, int a) {
<separator>
public class MyJVMTest {
    void test_vi_inv(boolean[] a, boolean b, int k) {
<separator>
public class MyJVMTest {
    String dumpByteArray(byte[] theByteArray) {
<separator>
public class MyJVMTest {
    long _loadS2Lmask16(short[] sa) {
<separator>
public class MyJVMTest {
    byte simpleb(byte i) {
<separator>
import java.awt.Dialog;
import java.awt.Frame;
<separator>
public class MyJVMTest {
    int size() {
<separator>
public class MyJVMTest {
    boolean isSpaceChar(String category) {
<separator>
package jdk.jfr.api.consumer.recordingstream;
import java.util.concurrent.CountDownLatch;
<separator>
public class MyJVMTest {
    int ze() {
<separator>
public class MyJVMTest {
    double interp(double v1, double v2, double t) {
<separator>
public class MyJVMTest {
    void indexOfStringNull() {
<separator>
public class MyJVMTest {
    <T, U extends T> T[] cast(U[] a) {
<separator>
public class MyJVMTest {
    void testdd() {
<separator>
public class MyJVMTest {
    int c = 1;
<separator>
public class MyJVMTest {
    int index(int i) {
<separator>
public class MyJVMTest {
    int[] reset(int[] array) {
<separator>
public class MyJVMTest {
    double sump(double[] a, Double result) {
<separator>
public class MyJVMTest {
    void test_ci(byte[] a, short[] b) {
<separator>
public class MyJVMTest {
    int dummy(int i) {
<separator>
package org.openj9.test.util;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    String helpGetDeadThreadStackTrace() {
<separator>
public class MyJVMTest {
    int mI = 0;
<separator>
public class MyJVMTest {
    int bitTest() {
<separator>
public class MyJVMTest {
    String echo(String s) {
<separator>
public class MyJVMTest {
    boolean test2(Object o) {
<separator>
public class MyJVMTest {
    int test2() {
<separator>
public class MyJVMTest {
    String getClassStr(Object o) {
<separator>
package com.ibm.j9.recreateclass.testclasses;
public class MyJVMTest {
<separator>
import java.lang.reflect.Method;
public class MyJVMTest {
<separator>
import javax.management.modelmbean.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int h;
<separator>
public class MyJVMTest {
    void testfp() {
<separator>
package org.openj9.test.lambdatests;
import java.util.Comparator;
<separator>
import javax.imageio.spi.IIOServiceProvider;
public class MyJVMTest {
<separator>
import java.util.function.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    short testb(short i) {
<separator>
public class MyJVMTest {
    int decode4ByteInt(byte[] data, int pos) {
<separator>
public class MyJVMTest {
    void checkExternalSuper(ExternalSuper s) throws Throwable {
<separator>
public class MyJVMTest {
    void test_pack2_swap(long[] p2, int[] a1) {
<separator>
public class MyJVMTest {
    int unchecked(int value) {
<separator>
package com.ibm.jvmti.tests.redefineClasses;
import java.util.concurrent.Semaphore;
<separator>
public class MyJVMTest {
    int return_int() {
<separator>
public class MyJVMTest {
    float testp(float f, int i, Float ib) {
<separator>
public class MyJVMTest {
    void test(Object v, String s1, String s2, boolean flag) {
<separator>
import java.io.File;
import java.io.FileOutputStream;
<separator>
public class MyJVMTest {
    int readUnsignedByteAt(int offset) {
<separator>
public class MyJVMTest {
    String classname;
<separator>
package jdk.jfr.event.oldobject;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test1(byte[] barray1, byte[] barray2, byte[] barray3, long[] larray, long v) {
<separator>
public class MyJVMTest {
    double remi_sumb2() {
<separator>
import java.nio.CharBuffer;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci_oppos(char[] a, short[] b) {
<separator>
public class MyJVMTest {
    void testup() {
<separator>
import java.util.*;
import java.nio.charset.*;
<separator>
public class MyJVMTest {
    A m(A strategy) {
<separator>
public class MyJVMTest {
    int test_shl(int a, int b) {
<separator>
public class MyJVMTest {
    short sum(short[] a) {
<separator>
public class MyJVMTest {
    void doTest1(int expected, int max, int i) {
<separator>
package infos;
import java.beans.BeanDescriptor;
<separator>
public class MyJVMTest {
    void test_ci(short[] a, double[] b) {
<separator>
import static java.util.GregorianCalendar.*;
import java.util.Calendar;
<separator>
public class MyJVMTest {
    void test_init(long[] a0) {
<separator>
public class MyJVMTest {
    void shift(int[] src) {
<separator>
import java.text.Collator;
import java.util.Locale;
<separator>
package nsk.stress.numeric.numeric006;
import java.io.PrintStream;
<separator>
package org.openj9.resources.classloader;
import java.io.Serializable;
<separator>
public class MyJVMTest {
    int signWOZero(int i) {
<separator>
public class MyJVMTest {
    boolean informationLossFloatToByte(Float value) {
<separator>
public class MyJVMTest {
    void check(double mod) {
<separator>
public class MyJVMTest {
    long fint(long x) {
<separator>
public class MyJVMTest {
    void test_lsai(byte[] a0, byte[] a1) {
<separator>
import javax.smartcardio.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    <T> int m() {
<separator>
public class MyJVMTest {
    long test_mul(long a, long b) {
<separator>
public class MyJVMTest {
    void test_vi(int[] a, int b) {
<separator>
public class MyJVMTest {
    int testRorOrInt32Or(int val) {
<separator>
package nsk.jvmti.RedefineClasses;
import java.io.*;
<separator>
public class MyJVMTest {
    void emptyDefault(int i) {
<separator>
public class MyJVMTest {
    void testShort() {
<separator>
public class MyJVMTest {
    void lshiftMe(int c) throws IllegalArgumentException {
<separator>
import java.awt.image.BufferedImage;
public class MyJVMTest {
<separator>
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
<separator>
import java.io.*;
import sun.security.util.*;
<separator>
public class MyJVMTest {
    int __HI(double x) {
<separator>
public class MyJVMTest {
    int test(int x) {
<separator>
public class MyJVMTest {
    boolean equalsBlock(byte[] b1, byte[] b2) {
<separator>
public class MyJVMTest {
    int errors = 0;
<separator>
package jdk.nashorn.test.models;
import java.util.Arrays;
<separator>
public class MyJVMTest {
    int X = javax.swing.SwingConstants.TOP;
<separator>
package com.ibm.j9.benchmarks.adapt;
import java.security.MessageDigest;
<separator>
public class MyJVMTest {
    boolean assertsEnabled() {
<separator>
public class MyJVMTest {
    void test_vi_neg(long[] a, long b) {
<separator>
public class MyJVMTest {
    String truncate(String string) {
<separator>
public class MyJVMTest {
    float remi_sumb() {
<separator>
public class MyJVMTest {
    void test_cp_oppos(long[] a, long[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    void flush() {
<separator>
public class MyJVMTest {
    int za() {
<separator>
public class MyJVMTest {
    String dddd() {
<separator>
public class MyJVMTest {
    int remi_sump2_cond(Integer j1) {
<separator>
public class MyJVMTest {
    void test_cp_inv(char[] a, char[] b, int k) {
<separator>
public class MyJVMTest {
    double simple(double i) {
<separator>
public class MyJVMTest {
    int i = 0;
<separator>
public class MyJVMTest {
    int i00 = 0, i01 = 1, i02 = 2, i03 = 3, i04 = 4;
<separator>
public class MyJVMTest {
    void foo() throws Throwable {
<separator>
package com.ibm.jvmti.tests.getThreadState;
import java.util.concurrent.locks.LockSupport;
<separator>
public class MyJVMTest {
    void test_pack2(long[] p2, int[] a1) {
<separator>
package nsk.jvmti.scenarios.hotswap.HS204.hs204t001;
import java.util.concurrent.atomic.AtomicBoolean;
<separator>
public class MyJVMTest {
    boolean mustBeInvalid(String className) {
<separator>
public class MyJVMTest {
    int test_muli(int a, int b) {
<separator>
public class MyJVMTest {
    int fibonacci(int x) {
<separator>
public class MyJVMTest {
    long sumb2(long[] a) {
<separator>
public class MyJVMTest {
    void test_mula(char[] a0, char[] a1, short[] a2) {
<separator>
public class MyJVMTest {
    void check(int testid, String have, String expect) throws Exception {
<separator>
public class MyJVMTest {
    boolean test_isGtC(double a) {
<separator>
package util;
import java.io.InputStream;
<separator>
import java.nio.*;
import java.util.*;
<separator>
public class MyJVMTest {
    void checkIAE(String methodName, Runnable r) {
<separator>
public class MyJVMTest {
    boolean zconv2(Object o) {
<separator>
public class MyJVMTest {
    String toHexRep(double d) {
<separator>
public class MyJVMTest {
    long remi_summ2_cond() {
<separator>
public class MyJVMTest {
    Object i_object_method() {
<separator>
public class MyJVMTest {
    double v;
<separator>
public class MyJVMTest {
    Class<?> forName4() throws Exception {
<separator>
public class MyJVMTest {
    float remi_sump(Float j) {
<separator>
public class MyJVMTest {
    void checkPattern(String actual, String expected) {
<separator>
public class MyJVMTest {
    String m;
<separator>
public class MyJVMTest {
    boolean test3_taken;
<separator>
public class MyJVMTest {
    StringBuffer sb;
<separator>
public class MyJVMTest {
    int operationCount;
<separator>
public class MyJVMTest {
    byte sump2(byte[] a, Byte result2) {
<separator>
public class MyJVMTest {
    int ARR_SIZE = 10;
<separator>
public class MyJVMTest {
    int[] staticArr = new int[42];
<separator>
package compiler.intrinsics;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean validatePlatform() {
<separator>
public class MyJVMTest {
    boolean test_isEq(int a, int b) {
<separator>
package validation;
import java.util.HashMap;
<separator>
public class MyJVMTest {
    void clone_and_verify(int[] src) {
<separator>
public class MyJVMTest {
    int testRorOrInt32Bic(int val) {
<separator>
public class MyJVMTest {
    void test_2ci_neg(char[] a, char[] b) {
<separator>
public class MyJVMTest {
    void test_ci_neg(short[] a, double[] b) {
<separator>
public class MyJVMTest {
    float remi_summ2() {
<separator>
public class MyJVMTest {
    String AGENT_LIB = "SuspendAtExit";
<separator>
public class MyJVMTest {
    long NestedLoop() {
<separator>
import java.awt.image.*;
import java.awt.color.*;
<separator>
public class MyJVMTest {
    int x = 0;
<separator>
public class MyJVMTest {
    double getX() {
<separator>
public class MyJVMTest {
    void test_ci_neg(float[] a) {
<separator>
public class MyJVMTest {
    Number m(X x) {
<separator>
public class MyJVMTest {
    void test_cp_neg(char[] a, char[] b) {
<separator>
public class MyJVMTest {
    void emptyDocComment2() {
<separator>
import java.util.function.Consumer;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci(short[] a, float[] b) {
<separator>
public class MyJVMTest {
    boolean isSpace(int ch) {
<separator>
package java.util.concurrent;
import java.lang.invoke.MethodHandles;
<separator>
public class MyJVMTest {
    Object cast(Object fromValue, Class<?> toType) {
<separator>
public class MyJVMTest {
    void checkTrue(boolean b) {
<separator>
package compiler.c2;
import java.nio.LongBuffer;
<separator>
public class MyJVMTest {
    int paddedSize;
<separator>
public class MyJVMTest {
    float simplem2(float i) {
<separator>
import javax.sound.sampled.AudioFormat;
public class MyJVMTest {
<separator>
package nsk.share.gc;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String endTag(String tag) {
<separator>
public class MyJVMTest {
    double sumb2(double[] a) {
<separator>
public class MyJVMTest {
    double u;
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, double[] b, byte c, double d) {
<separator>
public class MyJVMTest {
    void usage(int exitcode) {
<separator>
public class MyJVMTest {
    void insertKeyRehash(Object key, int index, int hash, Object cur) {
<separator>
import java.util.*;
import java.security.*;
<separator>
public class MyJVMTest {
    int N = 64;
<separator>
public class MyJVMTest {
    byte testm(byte i) {
<separator>
public class MyJVMTest {
    int SIZE = 60000;
<separator>
public class MyJVMTest {
    String returnFizz(int i) {
<separator>
public class MyJVMTest {
    <K> String genericMethod3(K k) {
<separator>
public class MyJVMTest {
    void computeTime() {
<separator>
public class MyJVMTest {
    void emptyDocComment5() {
<separator>
public class MyJVMTest {
    long test(byte b) {
<separator>
public class MyJVMTest {
    byte sum2(byte[] a) {
<separator>
public class MyJVMTest {
    int[] m2(Object src, boolean flag) {
<separator>
import java.awt.*;
import sun.awt.*;
<separator>
public class MyJVMTest {
    String value;
<separator>
public class MyJVMTest {
    long test_shr(long a, long b) {
<separator>
public class MyJVMTest {
    void test_ci(int[] a, long[] b) {
<separator>
import java.security.Provider;
import java.security.Security;
<separator>
public class MyJVMTest {
    int m3() {
<separator>
public class MyJVMTest {
    int ITERS = 10000000;
<separator>
public class MyJVMTest {
    int w = x = 3;
<separator>
public class MyJVMTest {
    double pause1(double x) {
<separator>
import java.io.*;
import javax.swing.*;
<separator>
public class MyJVMTest {
    String osArch = System.getProperty("os.arch");
<separator>
public class MyJVMTest {
    void test_2ci_oppos(char[] a, char[] b) {
<separator>
public class MyJVMTest {
    String val = "test value";
<separator>
public class MyJVMTest {
    short jupiter(int x, long y, double z) {
<separator>
package vm.compiler.jbe.subcommon.subcommon02;
import java.io.*;
<separator>
public class MyJVMTest {
    Object oField;
<separator>
package tests;
import java.nio.file.Path;
<separator>
public class MyJVMTest {
    int[] lengths = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 99, 99, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 2, 3, 1, 1, 3, 3, 1, 1, 0, 4, 3, 3, 5, 5, 1 };
<separator>
import java.math.*;
import static java.math.BigInteger.*;
<separator>
public class MyJVMTest {
    Object doStrictFloorDiv(long x, int y) {
<separator>
package q;
import java.io.*;
<separator>
public class MyJVMTest {
    void assertTrue(boolean cond, String msg) {
<separator>
public class MyJVMTest {
    int test_addi(int a, int b) {
<separator>
public class MyJVMTest {
    int readUnsignedShortAt(int offset) {
<separator>
public class MyJVMTest {
    void reportExceptionAndFail(String message) {
<separator>
public class MyJVMTest {
    double simpleb(double i) {
<separator>
import java.util.jar.*;
import java.util.*;
<separator>
package selectionresolution;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String m(Object o) {
<separator>
public class MyJVMTest {
    void b() {
<separator>
public class MyJVMTest {
    void fatal() {
<separator>
public class MyJVMTest {
    boolean isJoinControl(int ch) {
<separator>
public class MyJVMTest {
    void test_ci_neg(short[] a, long[] b) {
<separator>
public class MyJVMTest {
    short[] reset(short[] array) {
<separator>
import javax.net.ssl.*;
import java.util.*;
<separator>
public class MyJVMTest {
    short[] index1;
<separator>
public class MyJVMTest {
    String getClassName() {
<separator>
public class MyJVMTest {
    String toAdd = "0123456789abcdef";
<separator>
public class MyJVMTest {
    int counter0;
<separator>
import static java.awt.font.NumericShaper.*;
import java.awt.font.NumericShaper;
<separator>
public class MyJVMTest {
    void assertEquals(int expected, int actual) {
<separator>
public class MyJVMTest {
    String test1() {
<separator>
public class MyJVMTest {
    String algoForTest;
<separator>
public class MyJVMTest {
    CharSequence getCharContent(boolean ignoreEncodingErrors) {
<separator>
public class MyJVMTest {
    int m(int a) {
<separator>
public class MyJVMTest {
    long remi_sump_cond(Long j) {
<separator>
public class MyJVMTest {
    void test_unrl_divi(double[] a0, double[] a1) {
<separator>
public class MyJVMTest {
    Object[] testArray = new Object[4];
<separator>
public class MyJVMTest {
    short remi_sumb2() {
<separator>
import java.awt.image.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int tests;
<separator>
public class MyJVMTest {
    double[] sums;
<separator>
public class MyJVMTest {
    H[] m6(Object[] src) {
<separator>
package com.ibm.jvmti.tests.decompResolveFrame;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    void testRorIntZero(int val) {
<separator>
public class MyJVMTest {
    int signExtractInt4(int x) {
<separator>
public class MyJVMTest {
    void getPermutations(byte[] inputArray, byte[][] outputArray) {
<separator>
public class MyJVMTest {
    void checkValue(String val, String checkVal) {
<separator>
public class MyJVMTest {
    void verifyEquals(String actual, String expected) {
<separator>
package java.text;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void method_with_many_locals(Object r1, int r2, int r3, int r4, int r5, int r6, int r7, Object r8) {
<separator>
public class MyJVMTest {
    int test2(int start, int stop) {
<separator>
public class MyJVMTest {
    char[] getName() {
<separator>
public class MyJVMTest {
    void finishThread() {
<separator>
import java.text.BreakIterator;
import java.text.CharacterIterator;
<separator>
public class MyJVMTest {
    int getValue() {
<separator>
public class MyJVMTest {
    int loadUS_signExt(char[] ca) {
<separator>
public class MyJVMTest {
    boolean shiftLeft = true;
<separator>
public class MyJVMTest {
    void test_cp_oppos(int[] a, int[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    void uncaughtException(Thread thread, Throwable throwable) {
<separator>
public class MyJVMTest {
    String toRegExString(String str) {
<separator>
public class MyJVMTest {
    String this$0 = null;
<separator>
public class MyJVMTest {
    Test6663854_Interface_2 var_66;
<separator>
public class MyJVMTest {
    void test_cp_neg(long[] a, long[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    Runnable sr;
<separator>
public class MyJVMTest {
    void test1_ror(int[] a0, int[] a1) {
<separator>
public class MyJVMTest {
    String[] FLAGNAMES = { "DIRECTION_DEFAULT_LEFT_TO_RIGHT", "DIRECTION_DEFAULT_RIGHT_TO_LEFT", "DIRECTION_LEFT_TO_RIGHT", "DIRECTION_RIGHT_TO_LEFT" };
<separator>
public class MyJVMTest {
    long[] i_prim_array_par_method(long[] la) {
<separator>
public class MyJVMTest {
    boolean failed;
<separator>
public class MyJVMTest {
    int failed = 0;
<separator>
public class MyJVMTest {
    String[] getClassNames() {
<separator>
public class MyJVMTest {
    void emptyCase(int i) {
<separator>
public class MyJVMTest {
    void printName(String loadedName) {
<separator>
public class MyJVMTest {
    boolean test_isLtC(int a) {
<separator>
public class MyJVMTest {
    int test(String message, boolean value) {
<separator>
public class MyJVMTest {
    void doTest(int expected, int max, int i) {
<separator>
public class MyJVMTest {
    long testRorOrLong63Eon(long val) {
<separator>
public class MyJVMTest {
    long blsiq(long src1) {
<separator>
public class MyJVMTest {
    int[] staticFinalArr = new int[42];
<separator>
public class MyJVMTest {
    int errored;
<separator>
public class MyJVMTest {
    Object keyword_character_class() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(int[] a, long[] b, int c, long d) {
<separator>
import static java.util.GregorianCalendar.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int charsOffset(byte[] data, int startIndex, int startOffset) {
<separator>
import java.util.logging.Logger;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Long foobar() {
<separator>
public class MyJVMTest {
    void test_2ci(long[] a, long[] b) {
<separator>
public class MyJVMTest {
    int testRorOrInt1Or(int val) {
<separator>
public class MyJVMTest {
    void test2(byte[] src_array, byte[] dst_array, int l) {
<separator>
package compiler.c2;
public class MyJVMTest {
<separator>
import javax.management.ObjectName;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    byte sum(byte[] a) {
<separator>
public class MyJVMTest {
    String getExpectedValue(String[] args) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(boolean[] a, boolean[] b, boolean c, boolean d) {
<separator>
public class MyJVMTest {
    int staticInt = 0xBABE;
<separator>
public class MyJVMTest {
    byte remi_summ2_cond() {
<separator>
public class MyJVMTest {
    void test_cp(double[] a, double[] b) {
<separator>
public class MyJVMTest {
    long recurse(int i, long v) {
<separator>
public class MyJVMTest {
    int testRorOrInt16And(int val) {
<separator>
public class MyJVMTest {
    double sump2(double[] a, Double result2) {
<separator>
public class MyJVMTest {
    void agentmain(String args) {
<separator>
public class MyJVMTest {
    int[] array = new int[12];
<separator>
public class MyJVMTest {
    int threadNum = 0;
<separator>
package xmlkit;
import java.util.*;
<separator>
public class MyJVMTest {
    Integer barfoo() {
<separator>
package util;
import java.io.IOException;
<separator>
public class MyJVMTest {
    String variant() {
<separator>
public class MyJVMTest {
    void test_2ci_neg(int[] a, int[] b) {
<separator>
import java.awt.color.ColorSpace;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String helpAddToClasspathDuringLiveBadJar() {
<separator>
public class MyJVMTest {
    String helpVMDidBootstrap() {
<separator>
public class MyJVMTest {
    boolean test_isGe(float a, float b) {
<separator>
public class MyJVMTest {
    void test_cp(short[] a, short[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    byte testb2(byte i) {
<separator>
package com.ibm.trace.tests.apptrace;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean isWaiting = false;
<separator>
public class MyJVMTest {
    Object x;
<separator>
public class MyJVMTest {
    byte[] E1000G0IPV6ADDRESS = { (byte) 0xfe, (byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x1b, (byte) 0x24, (byte) 0xff, (byte) 0xfe, (byte) 0xbd, (byte) 0xf2, (byte) 0x9c };
<separator>
package test.java.awt.regtesthelpers.process;
public class MyJVMTest {
<separator>
import javax.xml.soap.MessageFactory;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Throwable failed;
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, int[] b, byte c, int d) {
<separator>
package compiler.arraycopy;
import java.util.*;
<separator>
public class MyJVMTest {
    int getReadWrite1() {
<separator>
package superTypeargs;
import java.util.*;
<separator>
public class MyJVMTest {
    void test_ci_neg(int[] a) {
<separator>
import java.util.ArrayList;
import java.util.List;
<separator>
public class MyJVMTest {
    byte[] createHeader(final int[] type, final int rate, final int channel, final long size) {
<separator>
public class MyJVMTest {
    int getCommentPos(byte[] d) {
<separator>
import javax.swing.BorderFactory;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_mula(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    String EXPECTED = "expected";
<separator>
package com.foo;
import java.text.*;
<separator>
public class MyJVMTest {
    String s = "";
<separator>
import java.util.concurrent.*;
import java.util.function.*;
<separator>
public class MyJVMTest {
    float[] reset(float[] array) {
<separator>
public class MyJVMTest {
    boolean isDivisibleByFive(int n) {
<separator>
import java.io.File;
import java.io.IOException;
<separator>
public class MyJVMTest {
    int test(InterfaceWithDefaultMethod1 x) {
<separator>
public class MyJVMTest {
    void test7_2(Object o) {
<separator>
public class MyJVMTest {
    boolean bol = true;
<separator>
import javax.swing.*;
import java.awt.Dimension;
<separator>
public class MyJVMTest {
    int test_divi(int a, int b) {
<separator>
import java.util.Map;
import javax.security.auth.Subject;
<separator>
import java.util.concurrent.ThreadLocalRandom;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void emptyDocComment3() {
<separator>
public class MyJVMTest {
    String getSomethingCached() {
<separator>
public class MyJVMTest {
    int allocCount = 0;
<separator>
public class MyJVMTest {
    void test_ci_neg(double[] a) {
<separator>
public class MyJVMTest {
    Object obj = new Object();
<separator>
public class MyJVMTest {
    void test5() {
<separator>
public class MyJVMTest {
    void premain(String agentArgs) {
<separator>
public class MyJVMTest {
    long safeMethod(long a) {
<separator>
public class MyJVMTest {
    boolean isDefined(Object attrName) {
<separator>
public class MyJVMTest {
    float test2(float f, int i) {
<separator>
public class MyJVMTest {
    void test_2ci_neg(double[] a, double[] b) {
<separator>
public class MyJVMTest {
    String constr = "xx1x";
<separator>
public class MyJVMTest {
    byte foo(byte i) {
<separator>
public class MyJVMTest {
    String print(long arg) {
<separator>
public class MyJVMTest {
    <T extends String> void test() {
<separator>
public class MyJVMTest {
    char doh(char c) {
<separator>
import java.io.*;
import java.nio.charset.*;
<separator>
public class MyJVMTest {
    void test1(int[] src_array, int[] dst_array, int l) {
<separator>
package custom;
import java.util.Locale;
<separator>
package jdk.jfr.event.runtime;
import java.util.concurrent.TimeUnit;
<separator>
public class MyJVMTest {
    void testCorrectness(long total, long valid, String op) throws Exception {
<separator>
public class MyJVMTest {
    int test1(int v) {
<separator>
public class MyJVMTest {
    int testRorOrInt32Eon(int val) {
<separator>
public class MyJVMTest {
    boolean isMac() {
<separator>
public class MyJVMTest {
    int checkSum(float[] a) {
<separator>
public class MyJVMTest {
    void fail() {
<separator>
public class MyJVMTest {
    int compute1(int x) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a) {
<separator>
public class MyJVMTest {
    boolean containsControlChar(String name) {
<separator>
public class MyJVMTest {
    void test_anda(char[] a0, char[] a1, short[] a2) {
<separator>
public class MyJVMTest {
    int fopt() {
<separator>
public class MyJVMTest {
    char[] array;
<separator>
public class MyJVMTest {
    long var_1 = -1;
<separator>
public class MyJVMTest {
    void myMethod2() {
<separator>
public class MyJVMTest {
    int simplep2(int i, Integer ib1) {
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    String helpLogOptions() {
<separator>
public class MyJVMTest {
    boolean test1_taken;
<separator>
public class MyJVMTest {
    float func_1() {
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    boolean separateServerThread = false;
<separator>
public class MyJVMTest {
    String moo() {
<separator>
import java.io.ByteArrayInputStream;
import java.io.File;
<separator>
import javax.management.MBeanOperationInfo;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_2vi_neg(float[] a, float[] b, float c, float d) {
<separator>
public class MyJVMTest {
    int IIMM12_1 = 0xfff;
<separator>
public class MyJVMTest {
    Object test5_src = null;
<separator>
import javax.swing.JFrame;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean friendly;
<separator>
public class MyJVMTest {
    char volatileField;
<separator>
public class MyJVMTest {
    long sumReductionImplement(long[] a, long[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    String logString;
<separator>
public class MyJVMTest {
    void test_ci(byte[] a, long[] b) {
<separator>
public class MyJVMTest {
    long testRorOrLong64Bic(long val) {
<separator>
package com.sun.swingset3.demos.table;
import java.net.URI;
<separator>
public class MyJVMTest {
    int EXIT_VALUE = 123;
<separator>
public class MyJVMTest {
    double value;
<separator>
public class MyJVMTest {
    void test(String[] args) {
<separator>
public class MyJVMTest {
    Object crash(I i, A1 a1, A2 a2, boolean b1, boolean b2) {
<separator>
public class MyJVMTest {
    byte testm2(byte i) {
<separator>
public class MyJVMTest {
    void test_ci_neg(short[] a) {
<separator>
public class MyJVMTest {
    String getIDstring() {
<separator>
public class MyJVMTest {
    void test_cp(short[] a, short[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    void test(boolean flag) {
<separator>
package org.openj9.test.java.security;
import java.security.PrivilegedAction;
<separator>
public class MyJVMTest {
    void test_ci_oppos(double[] a) {
<separator>
public class MyJVMTest {
    long remi_sum() {
<separator>
public class MyJVMTest {
    Object prop, Prop, setProp, getProp;
<separator>
public class MyJVMTest {
    I bar() {
<separator>
public class MyJVMTest {
    void sync_shouldnt_be_tested() {
<separator>
import javax.naming.ldap.Rdn;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long test_ushr(long a, long b) {
<separator>
public class MyJVMTest {
    long test_shlc1(long a) {
<separator>
public class MyJVMTest {
    boolean equalsBlockPartial(byte[] b1, byte[] b2, int b1BKSize, int b2BKSize) {
<separator>
public class MyJVMTest {
    long testRorOrLong16(long val) {
<separator>
public class MyJVMTest {
    void test8_2(Object o) {
<separator>
package compiler.c1;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    boolean verify(String str) {
<separator>
public class MyJVMTest {
    int closeCount = 0;
<separator>
public class MyJVMTest {
    String getType(Object data) {
<separator>
public class MyJVMTest {
    void testf() {
<separator>
public class MyJVMTest {
    String[] array;
<separator>
public class MyJVMTest {
    Object doStrictFloorMod(long x, int y) {
<separator>
public class MyJVMTest {
    void emptyDocComment0() {
<separator>
public class MyJVMTest {
    short[] sa = new short[] { -1 };
<separator>
public class MyJVMTest {
    void test_unrl_init(float[] a0) {
<separator>
public class MyJVMTest {
    String helpGetHeapFreeTotalMemory() {
<separator>
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
<separator>
public class MyJVMTest {
    String getContentType() {
<separator>
public class MyJVMTest {
    void sleep(int milliseconds) {
<separator>
public class MyJVMTest {
    void stackMapTableTest(String[] args) {
<separator>
import com.sun.net.httpserver.*;
public class MyJVMTest {
<separator>
import javax.print.*;
import javax.print.attribute.*;
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    Object convert(Object fromValue, Class<?> toType) {
<separator>
import javax.management.*;
import javax.management.modelmbean.*;
<separator>
public class MyJVMTest {
    String message;
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, int[] b, byte c, int d) {
<separator>
public class MyJVMTest {
    short test(short i) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(byte[] a, byte[] b, byte c, byte d) {
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, short[] b, byte c, short d) {
<separator>
public class MyJVMTest {
    String[] badStrings = { "", "+", "-", "+e", "-e", "+e170", "-e170", "1234   e10", "-1234   e10", "1\u0007e1", "1e\u00071", "NaNf", "NaNF", "NaNd", "NaND", "-NaNf", "-NaNF", "-NaNd", "-NaND", "+NaNf", "+NaNF", "+NaNd", "+NaND", "Infinityf", "InfinityF", "Infinityd", "InfinityD", "-Infinityf", "-InfinityF", "-Infinityd", "-InfinityD", "+Infinityf", "+InfinityF", "+Infinityd", "+InfinityD", "NaNe10", "-NaNe10", "+NaNe10", "Infinitye10", "-Infinitye10", "+Infinitye10", "\u0661e\u0661", "\u06F1e\u06F1", "\u0967e\u0967" };
<separator>
import javax.crypto.*;
import java.nio.file.*;
<separator>
public class MyJVMTest {
    void f1() {
<separator>
public class MyJVMTest {
    int offset;
<separator>
public class MyJVMTest {
    void testByte() {
<separator>
package mods.modulea.package1;
import java.lang.invoke.MethodHandles;
<separator>
public class MyJVMTest {
    int testRorAddInt1(int val) {
<separator>
public class MyJVMTest {
    void testUnsigned(char c) {
<separator>
public class MyJVMTest {
    A first;
<separator>
public class MyJVMTest {
    int[] data;
<separator>
public class MyJVMTest {
    void test(int[] array) {
<separator>
public class MyJVMTest {
    int npeCount = 0;
<separator>
public class MyJVMTest {
    T t;
<separator>
import java.awt.BasicStroke;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String str(String s) {
<separator>
public class MyJVMTest {
    void test_lsai(long[] a0, long[] a1) {
<separator>
public class MyJVMTest {
    long simplem2(long i) {
<separator>
public class MyJVMTest {
    boolean isPunct(int ch) {
<separator>
public class MyJVMTest {
    int ITERS2 = 40000;
<separator>
public class MyJVMTest {
    String helpTraceSubscription() {
<separator>
public class MyJVMTest {
    int length() {
<separator>
public class MyJVMTest {
    void emptyDocComment1() {
<separator>
import javax.annotation.processing.*;
import javax.lang.model.element.*;
<separator>
public class MyJVMTest {
    String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
<separator>
public class MyJVMTest {
    void errorHandling(String msg) {
<separator>
package jdk.test.lib;
import java.io.File;
<separator>
public class MyJVMTest {
    Long m() {
<separator>
public class MyJVMTest {
    IllegalArgumentException notMinimalEncoding(long payloadLength) {
<separator>
public class MyJVMTest {
    Local g() {
<separator>
public class MyJVMTest {
    int count = 100;
<separator>
public class MyJVMTest {
    B foo() {
<separator>
public class MyJVMTest {
    double test_div(double a, double b) {
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    void notInlined(int[] array) {
<separator>
public class MyJVMTest {
    void test_2ci_oppos(int[] a, int[] b) {
<separator>
public class MyJVMTest {
    double pi;
<separator>
public class MyJVMTest {
    void test_2ci(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    String toLowerCase(String message) {
<separator>
public class MyJVMTest {
    String NETWORK_IF_E1000G0 = "e1000g0";
<separator>
public class MyJVMTest {
    void test_vi_inv(short[] a, short b, int k) {
<separator>
public class MyJVMTest {
    void assertTrue(boolean cond) {
<separator>
package CustomCLs;
import java.util.*;
<separator>
public class MyJVMTest {
    String getMessageString(byte[] data) {
<separator>
public class MyJVMTest {
    String helpMethodExitFromNative() {
<separator>
public class MyJVMTest {
    void test(String s) {
<separator>
public class MyJVMTest {
    void checkForSingleCreationFailure(int numCreationFailuresDetected) {
<separator>
public class MyJVMTest {
    float remi_sump_cond(Float j) {
<separator>
package sun.security.ssl;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int val() {
<separator>
import java.beans.Introspector;
import java.beans.MethodDescriptor;
<separator>
public class MyJVMTest {
    int safeMethod(int a) {
<separator>
public class MyJVMTest {
    int test(int i) {
<separator>
public class MyJVMTest {
    void sde_testMethod2() {
<separator>
public class MyJVMTest {
    short remi_sum() {
<separator>
package j9vm.test.clone;
import java.util.Hashtable;
<separator>
public class MyJVMTest {
    void test_cp_neg(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    int getMinimum(int field) {
<separator>
public class MyJVMTest {
    int SCOPE_ID_LO0 = 1;
<separator>
public class MyJVMTest {
    void sleep(int millis) {
<separator>
public class MyJVMTest {
    void display() throws Exception {
<separator>
public class MyJVMTest {
    int iField;
<separator>
public class MyJVMTest {
    int type;
<separator>
public class MyJVMTest {
    void test_vi(short[] a, short b) {
<separator>
package com.ibm.jvmti.tests.getSystemProperty;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int sleepMillis;
<separator>
public class MyJVMTest {
    void pause(int mls) {
<separator>
import java.awt.FlowLayout;
import java.awt.Graphics;
<separator>
public class MyJVMTest {
    void test_xorv(int[] a0, int[] a1, int b) {
<separator>
import java.util.*;
import java.lang.annotation.*;
<separator>
public class MyJVMTest {
    int val;
<separator>
public class MyJVMTest {
    int testRorOrInt1(int val) {
<separator>
public class MyJVMTest {
    int test_orc2(int a) {
<separator>
import java.awt.color.ColorSpace;
import java.awt.image.DataBuffer;
<separator>
public class MyJVMTest {
    void testRorLongZero(long val) {
<separator>
import java.awt.*;
import java.util.concurrent.atomic.*;
<separator>
public class MyJVMTest {
    void prodReductionInit(int[] a, int[] b) {
<separator>
public class MyJVMTest {
    int namedBreak(String s) {
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToShort(Double value) {
<separator>
public class MyJVMTest {
    String wahoo(String s) {
<separator>
public class MyJVMTest {
    Object m2(Object o1, Object o2, int i) {
<separator>
public class MyJVMTest {
    <T> boolean isOK(T x) {
<separator>
public class MyJVMTest {
    int test2(int div, int[] array) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, byte elem, byte val) {
<separator>
public class MyJVMTest {
    double x;
<separator>
public class MyJVMTest {
    void check(Object actual, Object expected) {
<separator>
import java.io.*;
import java.security.spec.*;
<separator>
public class MyJVMTest {
    void print(String id, Class<?> type) {
<separator>
public class MyJVMTest {
    int var = 1;
<separator>
package vm.share;
import java.io.ByteArrayOutputStream;
<separator>
public class MyJVMTest {
    void test_2ci(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    void f(String... args) {
<separator>
public class MyJVMTest {
    boolean verifyLongCaching() {
<separator>
public class MyJVMTest {
    boolean informationLossLongToShort(Long value) {
<separator>
public class MyJVMTest {
    boolean test(Number n) {
<separator>
public class MyJVMTest {
    String constr = "1y";
<separator>
public class MyJVMTest {
    byte simple(byte i) {
<separator>
public class MyJVMTest {
    String verifyProperty(String name, String expected_re) {
<separator>
package compiler.c2;
import java.util.ArrayList;
<separator>
import java.io.InvalidClassException;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Runnable static_r = () -> {
<separator>
public class MyJVMTest {
    int IMG_W = 400;
<separator>
public class MyJVMTest {
    float summ2(float[] a) {
<separator>
public class MyJVMTest {
    Byte foob(byte i) {
<separator>
public class MyJVMTest {
    SecurityManager sm = new SecurityManager();
<separator>
public class MyJVMTest {
    long testRorOrLong64Orn(long val) {
<separator>
public class MyJVMTest {
    short remi_sumb() {
<separator>
import java.awt.Font;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int test_shr(int a, int b) {
<separator>
public class MyJVMTest {
    void fail(String enc, String msg, int e0, int e1, int b0, int b1) throws Exception {
<separator>
public class MyJVMTest {
    @SuppressWarnings("finally")
<separator>
public class MyJVMTest {
    float remi_sumb_cond() {
<separator>
package gc.z;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void sde_testMethod1() {
<separator>
public class MyJVMTest {
    String str = "11111xx11111xx1x";
<separator>
import java.nio.charset.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String cccc() {
<separator>
public class MyJVMTest {
    IllegalArgumentException negativePayload(long payloadLength) {
<separator>
public class MyJVMTest {
    Object doStrictFloorMod(long x, long y) {
<separator>
import javax.sound.midi.MetaMessage;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long test4(long div, int[] array) {
<separator>
public class MyJVMTest {
    String i_string_method() {
<separator>
public class MyJVMTest {
    int prop, Prop, setProp, getProp;
<separator>
public class MyJVMTest {
    int testByteToUnsignedInt() {
<separator>
public class MyJVMTest {
    void pkgCr() {
<separator>
public class MyJVMTest {
    int remi_sumb() {
<separator>
public class MyJVMTest {
    short sumb(short[] a) {
<separator>
public class MyJVMTest {
    int twoProperty() {
<separator>
public class MyJVMTest {
    int loadUS_signExt_1(char[] ca) {
<separator>
public class MyJVMTest {
    int lzint(long l) {
<separator>
public class MyJVMTest {
    byte[] ascii85Encode(byte[] inArr) {
<separator>
package com.ibm.jvmti.tests.BCIWithASM;
import java.io.FileOutputStream;
<separator>
public class MyJVMTest {
    String nl = System.getProperty("line.separator");
<separator>
public class MyJVMTest {
    int ID = 2;
<separator>
public class MyJVMTest {
    boolean setDefaultAssertionStatusMethodCalled;
<separator>
package nsk.share.gc;
import java.io.*;
<separator>
public class MyJVMTest {
    Object field;
<separator>
public class MyJVMTest {
    long remi_sum2_cond() {
<separator>
public class MyJVMTest {
    String log = "";
<separator>
public class MyJVMTest {
    long loadS2LmaskFF_1(short[] sa) {
<separator>
public class MyJVMTest {
    <T> T m1(T t1, T t2) {
<separator>
import java.lang.invoke.*;
import static java.lang.invoke.MethodType.*;
<separator>
public class MyJVMTest {
    Object s_object_method() {
<separator>
public class MyJVMTest {
    MyException myex = new MyException();
<separator>
public class MyJVMTest {
    Boolean get() {
<separator>
public class MyJVMTest {
    float remi_sump2_cond(Float j1) {
<separator>
import java.awt.Rectangle;
import java.awt.Shape;
<separator>
public class MyJVMTest {
    Tester_Class_9 func_3() {
<separator>
public class MyJVMTest {
    int ID = 1;
<separator>
public class MyJVMTest {
    void test(int nanos) {
<separator>
public class MyJVMTest {
    void reductionInit2(int[] a, int[] b, int[] c) {
<separator>
public class MyJVMTest {
    double b;
<separator>
public class MyJVMTest {
    long test_sub(long a, long b) {
<separator>
public class MyJVMTest {
    void test_2ci_oppos(long[] a, long[] b) {
<separator>
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
<separator>
import javax.security.auth.*;
import javax.security.auth.login.*;
<separator>
public class MyJVMTest {
    String ccc() {
<separator>
import java.applet.Applet;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a, float[] b) {
<separator>
public class MyJVMTest {
    int IndexOfTest(String str) {
<separator>
public class MyJVMTest {
    int test5(Object src, int l, boolean flag) {
<separator>
public class MyJVMTest {
    void m(Y y1, X x2) {
<separator>
public class MyJVMTest {
    void checkPrivileges() {
<separator>
public class MyJVMTest {
    long simple(long i) {
<separator>
public class MyJVMTest {
    boolean containsAttribute(Object name, Object value) {
<separator>
package com.p1;
import java.security.*;
<separator>
public class MyJVMTest {
    int mod = Integer.MAX_VALUE;
<separator>
public class MyJVMTest {
    Object go = new Object();
<separator>
public class MyJVMTest {
    long testRorOrLong1Or(long val) {
<separator>
public class MyJVMTest {
    int result;
<separator>
public class MyJVMTest {
    float test_sub(float a, float b) {
<separator>
public class MyJVMTest {
    String helpCase3() {
<separator>
public class MyJVMTest {
    void method(int i) {
<separator>
public class MyJVMTest {
    void test_ci_neg(int[] a, float[] b) {
<separator>
public class MyJVMTest {
    void testdp() {
<separator>
public class MyJVMTest {
    void test_ci(boolean[] a) {
<separator>
public class MyJVMTest {
    long MASK;
<separator>
public class MyJVMTest {
    void test_cp_neg(boolean[] a, boolean[] b) {
<separator>
import java.io.InputStreamReader;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int[] m4(int[] src, int length) {
<separator>
public class MyJVMTest {
    int filterRGB(int x, int y, int rgb) {
<separator>
public class MyJVMTest {
    long testRorOrLong63Eor(long val) {
<separator>
package com.p2;
import java.security.*;
<separator>
public class MyJVMTest {
    void doit() {
<separator>
public class MyJVMTest {
    String s_string_par_method(String s) {
<separator>
public class MyJVMTest {
    short testm(short i) {
<separator>
public class MyJVMTest {
    void checkMsg(Error e, String expected) throws Exception {
<separator>
public class MyJVMTest {
    String CLASS_TO_LOAD = "ParentlessChild";
<separator>
public class MyJVMTest {
    int m(String s) {
<separator>
public class MyJVMTest {
    float remi_summ2_cond() {
<separator>
public class MyJVMTest {
    Object next;
<separator>
import java.awt.event.ActionListener;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String returnBuzz(int i) {
<separator>
public class MyJVMTest {
    long start;
<separator>
public class MyJVMTest {
    String E1000G0HOSTADDRESS = "fe80:0:0:0:21b:24ff:febd:f29c%e1000g0";
<separator>
public class MyJVMTest {
    String hereS() {
<separator>
public class MyJVMTest {
    long test_subc1(long a) {
<separator>
public class MyJVMTest {
    long[] la = new long[] { -1 };
<separator>
public class MyJVMTest {
    void sleep(int seconds) {
<separator>
public class MyJVMTest {
    void echo(String msg) {
<separator>
public class MyJVMTest {
    void test(Runnable r) {
<separator>
import java.awt.Robot;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double remi_sum_cond() {
<separator>
public class MyJVMTest {
    String[] stringArray = { "s", "t", "r" };
<separator>
public class MyJVMTest {
    int signExtractInt1(int x) {
<separator>
public class MyJVMTest {
    int f1() {
<separator>
public class MyJVMTest {
    int test1(int[] arr) {
<separator>
package org.openj9.test.utilities;
import java.lang.instrument.Instrumentation;
<separator>
public class MyJVMTest {
    int[] iArr = new int[10];
<separator>
public class MyJVMTest {
    int size;
<separator>
public class MyJVMTest {
    Object field2;
<separator>
public class MyJVMTest {
    void test_2ci_neg(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    int testRorOrInt1Eor(int val) {
<separator>
import java.util.logging.LogManager;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String eee() {
<separator>
package gc.g1.unloading.bytecode;
import java.util.*;
<separator>
public class MyJVMTest {
    void testParent() {
<separator>
public class MyJVMTest {
    int IIMM24_5 = 0x1001000;
<separator>
public class MyJVMTest {
    void noException() {
<separator>
import java.util.LinkedList;
import java.util.List;
<separator>
public class MyJVMTest {
    long IIMM12_1 = 0xfff;
<separator>
public class MyJVMTest {
    boolean _match(String[] args, String match) {
<separator>
public class MyJVMTest {
    long test_div(long a, long b) {
<separator>
public class MyJVMTest {
    int remi_summ2_cond() {
<separator>
package nsk.share;
import java.io.File;
<separator>
public class MyJVMTest {
    int sumInt(int[] a1, int[] a2, int[] a3) {
<separator>
public class MyJVMTest {
    void test_2ci_oppos(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    float simple(float i) {
<separator>
public class MyJVMTest {
    String color;
<separator>
import java.security.Permission;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long testRorOrLong64Eor(long val) {
<separator>
public class MyJVMTest {
    long checkSum(long[] a) {
<separator>
public class MyJVMTest {
    void check(int expected, int actual) {
<separator>
public class MyJVMTest {
    boolean test_isGeC(double a) {
<separator>
public class MyJVMTest {
    void test_vi_neg(char[] a, short[] b, char c, short d) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(short[] a, short[] b, short c, short d) {
<separator>
public class MyJVMTest {
    Object field1;
<separator>
public class MyJVMTest {
    void test_ci(double[] a) {
<separator>
package TVJar;
import java.security.Permission;
<separator>
public class MyJVMTest {
    long remi_sumb() {
<separator>
public class MyJVMTest {
    String sayHello() {
<separator>
public class MyJVMTest {
    void test4() {
<separator>
public class MyJVMTest {
    short remi_sump_cond(Short j) {
<separator>
public class MyJVMTest {
    void generateSyntheticNPE(TestSyntheticNullChecks outer) {
<separator>
public class MyJVMTest {
    long meth2() {
<separator>
public class MyJVMTest {
    void callToChars1(int codePoint, Class expectedException) {
<separator>
import static java.awt.Color.RED;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean test_isEq(double a, double b) {
<separator>
public class MyJVMTest {
    void test_vi(short[] a, int[] b, short c, int d) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(boolean[] a, boolean[] b, boolean c, boolean d, int k) {
<separator>
public class MyJVMTest {
    void callOffsetByCodePoints(CharSequence seq, int index, int offset, Class expectedException) {
<separator>
public class MyJVMTest {
    long testRorOrLong1Eon(long val) {
<separator>
public class MyJVMTest {
    boolean test_isGt(int a, int b) {
<separator>
public class MyJVMTest {
    void assertEqual(String a, String b) {
<separator>
public class MyJVMTest {
    String stringmakerBUG(String str) {
<separator>
public class MyJVMTest {
    byte[] reset(byte[] array) {
<separator>
public class MyJVMTest {
    byte sumb2(byte[] a) {
<separator>
public class MyJVMTest {
    int test2(int[] arr) {
<separator>
public class MyJVMTest {
    long KSIZE = 1024;
<separator>
public class MyJVMTest {
    String getUnicodeString(String s) {
<separator>
public class MyJVMTest {
    Class<?> negativeforName() {
<separator>
public class MyJVMTest {
    long getNeptune() {
<separator>
public class MyJVMTest {
    void usageError() {
<separator>
public class MyJVMTest {
    int field2 = -1;
<separator>
import java.text.*;
import java.text.*;
<separator>
public class MyJVMTest {
    boolean test_isLeC(double a) {
<separator>
public class MyJVMTest {
    int m4() {
<separator>
public class MyJVMTest {
    void problematicMethod2(int p) {
<separator>
public class MyJVMTest {
    <T> int length(String s) {
<separator>
public class MyJVMTest {
    String aaaa() {
<separator>
public class MyJVMTest {
    void reductionInit2(long[] a, long[] b, long[] c) {
<separator>
public class MyJVMTest {
    void loo() {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(float[] a, float[] b, float c, float d) {
<separator>
public class MyJVMTest {
    void delay(int millis) {
<separator>
public class MyJVMTest {
    void test_vi_neg(long[] a, float[] b, long c, float d) {
<separator>
public class MyJVMTest {
    void testClass(String class_name, String msg) throws Throwable {
<separator>
public class MyJVMTest {
    void addAll(Collection<E> c) {
<separator>
public class MyJVMTest {
    boolean foo(Object paramObject) {
<separator>
public class MyJVMTest {
    boolean theTestPassed;
<separator>
public class MyJVMTest {
    void init(int[] a, int seed) {
<separator>
import java.beans.Introspector;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test(byte[] array) {
<separator>
public class MyJVMTest {
    void test_vi(long[] a, long b) {
<separator>
public class MyJVMTest {
    String[] strings = new String[1024];
<separator>
public class MyJVMTest {
    int oneProperty() {
<separator>
public class MyJVMTest {
    String s = "f";
<separator>
public class MyJVMTest {
    String erroutput = "oops, complex problem with diagnostics";
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_init(short[] a0) {
<separator>
public class MyJVMTest {
    int add(int x, int y) {
<separator>
public class MyJVMTest {
    Object cl() throws CloneNotSupportedException {
<separator>
public class MyJVMTest {
    java.util.Random rnd = new java.util.Random();
<separator>
public class MyJVMTest {
    void test_2vi_oppos(int[] a, int[] b, int c, int d) {
<separator>
public class MyJVMTest {
    String getString(int i) {
<separator>
public class MyJVMTest {
    Integer meth() {
<separator>
public class MyJVMTest {
    boolean stopthreads = false;
<separator>
public class MyJVMTest {
    long value = 0;
<separator>
public class MyJVMTest {
    int testRorOrInt32And(int val) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(double[] a, double[] b, double c, double d, int k) {
<separator>
public class MyJVMTest {
    String SYNTHETIC_CAST_TYPE = "[Ljava.lang.String;";
<separator>
public class MyJVMTest {
    boolean[] arr = new boolean[20];
<separator>
package com.oracle.mxtool.junit;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_unrl_init(short[] a0) {
<separator>
public class MyJVMTest {
    void test(Object[] array) {
<separator>
public class MyJVMTest {
    Object get() {
<separator>
public class MyJVMTest {
    int checkSum(int[] a) {
<separator>
public class MyJVMTest {
    void check(boolean err, String msg) {
<separator>
import javax.security.auth.callback.*;
import java.util.*;
<separator>
public class MyJVMTest {
    void test_vi(int[] a, float[] b, int c, float d) {
<separator>
public class MyJVMTest {
    void test_cp_neg(short[] a, short[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    int test_mulic4(int a) {
<separator>
package java.text;
import java.util.Calendar;
<separator>
public class MyJVMTest {
    float halfUlp;
<separator>
public class MyJVMTest {
    int IIMM24_4 = 0xfff000;
<separator>
public class MyJVMTest {
    void check(int value, int result, int expected) {
<separator>
public class MyJVMTest {
    byte[] toByteArray(long[] arr) {
<separator>
public class MyJVMTest {
    String RESULT_1 = "1";
<separator>
public class MyJVMTest {
    void bugReportExample() {
<separator>
public class MyJVMTest {
    int fi() {
<separator>
public class MyJVMTest {
    int getOne() {
<separator>
public class MyJVMTest {
    boolean m_interruptSent = false;
<separator>
public class MyJVMTest {
    double remi_sumb() {
<separator>
import javax.swing.*;
import javax.swing.text.html.*;
<separator>
public class MyJVMTest {
    void awaitWaitState(Thread[] threads) {
<separator>
public class MyJVMTest {
    C c() {
<separator>
public class MyJVMTest {
    String name = "NO NAME";
<separator>
public class MyJVMTest {
    void handleError(String error, int pos) {
<separator>
import java.awt.AWTKeyStroke;
import java.awt.event.InputEvent;
<separator>
public class MyJVMTest {
    long test3(long div, int[] array) {
<separator>
public class MyJVMTest {
    int nextInt() {
<separator>
public class MyJVMTest {
    void f3(int a, int b) {
<separator>
public class MyJVMTest {
    void test_cp_neg(long[] a, long[] b) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a, int[] b) {
<separator>
public class MyJVMTest {
    int testRorOrInt1Bic(int val) {
<separator>
public class MyJVMTest {
    short testb2(short i) {
<separator>
public class MyJVMTest {
    int sum(int[] a) {
<separator>
public class MyJVMTest {
    void testRolLongZero(long val) {
<separator>
public class MyJVMTest {
    int test5(int[] array) {
<separator>
public class MyJVMTest {
    void test_vi_inv(int[] a, int b, int k) {
<separator>
import java.awt.Font;
import java.io.File;
<separator>
public class MyJVMTest {
    void Attack() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(float[] a, double[] b, float c, double d) {
<separator>
public class MyJVMTest {
    boolean informationLossLongToInt(Long value) {
<separator>
package jdk.test.lib;
import java.math.BigInteger;
<separator>
import java.util.function.Supplier;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void m(int i4) {
<separator>
public class MyJVMTest {
    void test_2ci_oppos(double[] a, double[] b) {
<separator>
package com.ibm.jvmti.tests.redefineClasses;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int compute2(int x) {
<separator>
public class MyJVMTest {
    long testRorOrLong64Or(long val) {
<separator>
public class MyJVMTest {
    int MAXLEN = 127;
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    void test_vi(short[] a, long[] b, short c, long d) {
<separator>
public class MyJVMTest {
    int m() {
<separator>
public class MyJVMTest {
    void test_vi(int[] a, double[] b, int c, double d) {
<separator>
import java.nio.file.*;
import java.io.*;
<separator>
public class MyJVMTest {
    Object m_a;
<separator>
public class MyJVMTest {
    void init(Object[] src, boolean[] dst) {
<separator>
public class MyJVMTest {
    int ITERATIONS = 1000;
<separator>
public class MyJVMTest {
    double sum2(double[] a) {
<separator>
public class MyJVMTest {
    long unchecked(long value) {
<separator>
import java.util.ArrayList;
import java.util.Arrays;
<separator>
public class MyJVMTest {
    void test_ci_oppos(float[] a) {
<separator>
public class MyJVMTest {
    long p;
<separator>
public class MyJVMTest {
    boolean test_isGeC(long a) {
<separator>
package MyPackage;
import java.util.ArrayList;
<separator>
public class MyJVMTest {
    long testRorOrLong16Bic(long val) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    int ITERATIONS = 100000;
<separator>
public class MyJVMTest {
    void test_sllv(char[] a0, char[] a1, int b) {
<separator>
import java.awt.ComponentOrientation;
public class MyJVMTest {
<separator>
package jdk.experimental.bytecode;
public class MyJVMTest {
<separator>
package j9vm.test.hashCode;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    void test_2ci_inv(byte[] a, byte[] b, int k) {
<separator>
public class MyJVMTest {
    Object doStrictFloorMod(int x, int y) {
<separator>
public class MyJVMTest {
    void test_addi(float[] a0, float[] a1) {
<separator>
package org.openj9.test.hangTest;
public class MyJVMTest {
<separator>
package com.ibm.j9.jsr292.bootstrap;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    byte[] src_array = { 'a', 'b', 'c', 'd', 'e' };
<separator>
public class MyJVMTest {
    int iFld = 20;
<separator>
package compiler.intrinsics.string;
import java.util.Arrays;
<separator>
public class MyJVMTest {
    void check_d2i(int expect) {
<separator>
public class MyJVMTest {
    void pkgCe() {
<separator>
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Handler;
<separator>
public class MyJVMTest {
    int current;
<separator>
public class MyJVMTest {
    long _l = 0L;
<separator>
package runtime.invokedynamic;
import java.lang.invoke.*;
<separator>
package util;
import javax.sql.RowSetReader;
<separator>
public class MyJVMTest {
    String resolve(String relfilename) {
<separator>
public class MyJVMTest {
    void test(int i, int[] arr) {
<separator>
public class MyJVMTest {
    int getEndOffset() {
<separator>
public class MyJVMTest {
    boolean equalsBlock(byte[] b1, byte[] b2, int len) {
<separator>
public class MyJVMTest {
    void sleep(long ms) {
<separator>
public class MyJVMTest {
    void test_unrl_divi(float[] a0, float[] a1) {
<separator>
public class MyJVMTest {
    int length;
<separator>
public class MyJVMTest {
    Object v = new Object();
<separator>
public class MyJVMTest {
    int IIMM12_0 = 0x1;
<separator>
public class MyJVMTest {
    int[] m1(int[] src) {
<separator>
package pkg;
import java.util.List;
<separator>
public class MyJVMTest {
    void test_vi_oppos(int[] a, double[] b, int c, double d) {
<separator>
import java.security.*;
import javax.xml.crypto.dsig.*;
<separator>
public class MyJVMTest {
    int test_mulic2(int a) {
<separator>
public class MyJVMTest {
    byte simple2(byte i) {
<separator>
public class MyJVMTest {
    long remi_sump2(Long j1) {
<separator>
package gc.g1.unloading.bytecode;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_vi_oppos(double[] a, double b) {
<separator>
public class MyJVMTest {
    long y;
<separator>
public class MyJVMTest {
    int returnOne() {
<separator>
public class MyJVMTest {
    float remi_sum2() {
<separator>
public class MyJVMTest {
    int remi_sum2_cond() {
<separator>
public class MyJVMTest {
    double testp2(double f, int i, Double ib1) {
<separator>
public class MyJVMTest {
    void test_unrl_addi(byte[] a0, byte[] a1) {
<separator>
public class MyJVMTest {
    boolean value;
<separator>
public class MyJVMTest {
    int test_ushr(int a, int b) {
<separator>
import java.util.*;
import java.lang.invoke.*;
<separator>
public class MyJVMTest {
    int counter = 1;
<separator>
package pkg.b.t;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int phaseInc(int phase) {
<separator>
public class MyJVMTest {
    boolean isAlpha(int ch) {
<separator>
import java.text.ChoiceFormat;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String helpAddToBootpathDuringLiveBadJar() {
<separator>
public class MyJVMTest {
    Object test13_3(Object o, boolean b) {
<separator>
public class MyJVMTest {
    Object[] test(Class c, Object o) {
<separator>
package jdk.internal.net.http.websocket;
import java.nio.ByteBuffer;
<separator>
public class MyJVMTest {
    void test_cp(byte[] a, byte[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    int fint(int i) {
<separator>
public class MyJVMTest {
    void write(String s) {
<separator>
public class MyJVMTest {
    boolean equalsFloat(float f1, float f2) {
<separator>
public class MyJVMTest {
    Object someMethod() {
<separator>
public class MyJVMTest {
    byte and = 0b0011, or = 0b0011, xor = 0b0011;
<separator>
public class MyJVMTest {
    long testRorOrLong64And(long val) {
<separator>
import java.util.List;
import java.util.ArrayList;
<separator>
import java.util.concurrent.ThreadFactory;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test2_helper(int[] array, int k, int j) {
<separator>
public class MyJVMTest {
    int value = 93;
<separator>
public class MyJVMTest {
    void test(SAM s) throws Throwable {
<separator>
public class MyJVMTest {
    Class<Object> foo(Object in) {
<separator>
public class MyJVMTest {
    void fail(String message) {
<separator>
package lib.jdb;
import java.util.Arrays;
<separator>
public class MyJVMTest {
    void pkgBr() {
<separator>
public class MyJVMTest {
    <T> int binarySearch(List<T> list, T key, Comparator<T> c) {
<separator>
public class MyJVMTest {
    int remi_sump2(Integer j1) {
<separator>
public class MyJVMTest {
    void test6_2(Object o) {
<separator>
public class MyJVMTest {
    char toHex(int i) {
<separator>
public class MyJVMTest {
    String ggg() {
<separator>
package gc.memory.LargePagesTest;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    int intFromBigEndian(byte[] array, int index) {
<separator>
public class MyJVMTest {
    void check(long[] a) {
<separator>
public class MyJVMTest {
    void assertLine(int expectedline) {
<separator>
public class MyJVMTest {
    void check(boolean condition, String methodName) {
<separator>
public class MyJVMTest {
    int getReadWrite2() {
<separator>
public class MyJVMTest {
    Float foob(float i) {
<separator>
public class MyJVMTest {
    String implPackageName = "com.sun.management.internal";
<separator>
public class MyJVMTest {
    D d;
<separator>
public class MyJVMTest {
    int signExtractInt3(int x) {
<separator>
public class MyJVMTest {
    int nWords;
<separator>
public class MyJVMTest {
    void test(Class<Double> cd, Class<? extends double[]> cdarr) {
<separator>
public class MyJVMTest {
    int numerrors;
<separator>
public class MyJVMTest {
    String helpGetOnLoadCapabilities() {
<separator>
public class MyJVMTest {
    void setObject(Object bean) {
<separator>
import javax.security.auth.x500.X500Principal;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    byte simplem2(byte i) {
<separator>
public class MyJVMTest {
    boolean test_isLtC(long a) {
<separator>
public class MyJVMTest {
    void f2() {
<separator>
public class MyJVMTest {
    boolean setPackageAssertionStatusMethodCalled;
<separator>
import java.util.BitSet;
public class MyJVMTest {
<separator>
package com.ibm.dump.tests.javacore_deadlock;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void loadClasses() throws ClassNotFoundException {
<separator>
public class MyJVMTest {
    void test() throws Exception {
<separator>
public class MyJVMTest {
    int[] escaped;
<separator>
public class MyJVMTest {
    boolean test_isGe(double a, double b) {
<separator>
public class MyJVMTest {
    int testp2(int i, Integer ib1) {
<separator>
import java.nio.file.*;
import static java.nio.file.StandardOpenOption.*;
<separator>
public class MyJVMTest {
    long testRorOrLong63Bic(long val) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, boolean elem, boolean val) {
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a) {
<separator>
public class MyJVMTest {
    void test_2vi(short[] a, short[] b, short c, short d) {
<separator>
public class MyJVMTest {
    long busyTime;
<separator>
public class MyJVMTest {
    F f;
<separator>
public class MyJVMTest {
    void test_cp_neg(short[] a, short[] b, long[] c, long[] d) {
<separator>
import java.util.Currency;
import java.util.Locale;
<separator>
public class MyJVMTest {
    void test_2ci_neg(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    int entryCount;
<separator>
public class MyJVMTest {
    void \ud801\udc01() {
<separator>
public class MyJVMTest {
    void pkgAr() {
<separator>
public class MyJVMTest {
    void test_cp_inv(byte[] a, byte[] b, int k) {
<separator>
public class MyJVMTest {
    int getMaximum(int field) {
<separator>
public class MyJVMTest {
    String className() {
<separator>
public class MyJVMTest {
    long test_add(long a, long b) {
<separator>
public class MyJVMTest {
    int simpleb(int i) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, int elem, int val) {
<separator>
public class MyJVMTest {
    Class<?> forName7() {
<separator>
public class MyJVMTest {
    long simplep2(long i, Long ib1) {
<separator>
public class MyJVMTest {
    long test_ushrc65(long a) {
<separator>
public class MyJVMTest {
    void throwThrowable(Throwable t) throws Exception {
<separator>
import static java.lang.Thread.holdsLock;
import static java.lang.Thread.holdsLock;
<separator>
public class MyJVMTest {
    boolean done = true;
<separator>
public class MyJVMTest {
    void premain() {
<separator>
public class MyJVMTest {
    void test_2vi(byte[] a, byte[] b, byte c, byte d) {
<separator>
public class MyJVMTest {
    int test_remi(int a, int b) {
<separator>
public class MyJVMTest {
    void hi() {
<separator>
package resources;
import java.util.ListResourceBundle;
<separator>
public class MyJVMTest {
    void test_ci(long[] a) {
<separator>
import javax.security.auth.login.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int test0() {
<separator>
public class MyJVMTest {
    boolean checkArgumentSyntax(String value, String allowedchars, String notallowedchars, String logmsg) {
<separator>
public class MyJVMTest {
    void test_vi(short[] a, double[] b, short c, double d) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(float[] a, float[] b, float c, float d, int k) {
<separator>
public class MyJVMTest {
    void myStaticMethod() {
<separator>
public class MyJVMTest {
    String staticPrivateMethod() {
<separator>
public class MyJVMTest {
    boolean m() {
<separator>
public class MyJVMTest {
    long i_long_par_method(long l) {
<separator>
public class MyJVMTest {
    int warnings(int a1, int a2) throws Exception {
<separator>
public class MyJVMTest {
    void log(String msg) {
<separator>
package compiler.loopopts.superword;
public class MyJVMTest {
<separator>
package test.java.lang.invoke.t8150782;
import static java.lang.invoke.MethodHandles.*;
<separator>
public class MyJVMTest {
    void unbalancedMonexit(Object object) {
<separator>
public class MyJVMTest {
    void test_2vi(double[] a, double[] b, double c, double d) {
<separator>
public class MyJVMTest {
    void test_pack2_swap(int[] p2, char[] a1) {
<separator>
import java.nio.file.Path;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int defaultMethod() {
<separator>
public class MyJVMTest {
    void test_ci_inv(int[] a, int k) {
<separator>
public class MyJVMTest {
    void test_vi(boolean[] a, boolean b) {
<separator>
public class MyJVMTest {
    float[] f = new float[16];
<separator>
package j9vm.test.ref;
import java.lang.ref.SoftReference;
<separator>
import java.io.File;
import java.util.concurrent.CountDownLatch;
<separator>
public class MyJVMTest {
    Thread myThread;
<separator>
public class MyJVMTest {
    void test_mulv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    void check(String msg, boolean ok) {
<separator>
public class MyJVMTest {
    void test(String encoding) throws Exception {
<separator>
public class MyJVMTest {
    void test11_3(Object o) {
<separator>
public class MyJVMTest {
    void goo() {
<separator>
public class MyJVMTest {
    void test_copy_ints_store_reversed(int[] dst, int[] src) {
<separator>
import java.text.*;
import java.time.*;
<separator>
public class MyJVMTest {
    Integer m(Object o) {
<separator>
public class MyJVMTest {
    int threeProperty() {
<separator>
public class MyJVMTest {
    void test_2ci_neg(long[] a, long[] b) {
<separator>
public class MyJVMTest {
    void test_cp(float[] a, float[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    int callCount = 0;
<separator>
public class MyJVMTest {
    long test2(long v) {
<separator>
package gc.stress.TestJNIBlockFullGC;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int capacity;
<separator>
public class MyJVMTest {
    String className;
<separator>
public class MyJVMTest {
    long sum2(long[] a) {
<separator>
public class MyJVMTest {
    void vMeth1(int i1) {
<separator>
public class MyJVMTest {
    boolean informationLossFloatToInt(Float value) {
<separator>
import java.nio.*;
import javax.crypto.*;
<separator>
public class MyJVMTest {
    void test_2ci(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    short[] a1 = new short[8];
<separator>
public class MyJVMTest {
    String AGENT_LIB = "GetLockOwnerName";
<separator>
public class MyJVMTest {
    double test_add(double a, double b) {
<separator>
public class MyJVMTest {
    void test_vi(short[] a, float[] b, short c, float d) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, short elem, short val) {
<separator>
public class MyJVMTest {
    short remi_sum2() {
<separator>
public class MyJVMTest {
    String helpObjectFER() {
<separator>
package compiler.intrinsics.sha;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long testDurationMillisDefault = 10L * 1000L;
<separator>
public class MyJVMTest {
    int getGreatestMinimum(int field) {
<separator>
public class MyJVMTest {
    String classify() {
<separator>
import java.util.concurrent.*;
import java.lang.reflect.*;
<separator>
public class MyJVMTest {
    String s_string_method() {
<separator>
import java.util.List;
import java.util.stream.Collectors;
<separator>
public class MyJVMTest {
    boolean equals(float f1, float f2) {
<separator>
package java.util;
import java.util.function.Supplier;
<separator>
public class MyJVMTest {
    long along = 0;
<separator>
public class MyJVMTest {
    void test_helper(int stop, int rec) {
<separator>
package nsk.stress.numeric.numeric006;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    T4695847<T> next;
<separator>
package nsk.jvmti.unit.events.redefineCFLH;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    boolean test_isEq(float a, float b) {
<separator>
public class MyJVMTest {
    int sleepTime = 300000;
<separator>
public class MyJVMTest {
    boolean test_isNe(int a, int b) {
<separator>
public class MyJVMTest {
    Object doFloorDiv(long x, int y) {
<separator>
public class MyJVMTest {
    int staticField3;
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, byte b) {
<separator>
public class MyJVMTest {
    Runnable m() {
<separator>
import java.io.*;
import static java.awt.Color.*;
<separator>
public class MyJVMTest {
    int K = 1024;
<separator>
public class MyJVMTest {
    <T> int f() {
<separator>
public class MyJVMTest {
    void test_2ci(boolean[] a, boolean[] b) {
<separator>
public class MyJVMTest {
    long func_0(final Tester_Class_1 arg_0, long arg_1) {
<separator>
public class MyJVMTest {
    int tzint(long l) {
<separator>
import java.security.AccessControlContext;
public class MyJVMTest {
<separator>
import java.util.concurrent.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_vi_oppos(long[] a, float[] b, long c, float d) {
<separator>
public class MyJVMTest {
    void run() throws RuntimeException {
<separator>
public class MyJVMTest {
    void test_2vi(int[] a, int[] b, int c, int d) {
<separator>
public class MyJVMTest {
    void test_vi_neg(short[] a, short b) {
<separator>
public class MyJVMTest {
    Integer foob(int i) {
<separator>
public class MyJVMTest {
    String E1000G0HOSTADDRESS_WITHINDEX = "fe80:0:0:0:21b:24ff:febd:f29c%2";
<separator>
package jdk.test;
import java.util.Locale;
<separator>
public class MyJVMTest {
    int testShortToUnsignedInt() {
<separator>
package nsk.stress.numeric.numeric004;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void meh() {
<separator>
public class MyJVMTest {
    long summ2(long[] a) {
<separator>
public class MyJVMTest {
    String n = null;
<separator>
public class MyJVMTest {
    void test12_3(Object o) {
<separator>
public class MyJVMTest {
    String helpSharedCacheAPI() {
<separator>
public class MyJVMTest {
    char charAt(int i) {
<separator>
import java.util.*;
import javax.security.auth.*;
<separator>
public class MyJVMTest {
    boolean isCntrl(int ch) {
<separator>
public class MyJVMTest {
    int dmChanges;
<separator>
import java.security.InvalidAlgorithmParameterException;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int blsmskl(int src1) {
<separator>
public class MyJVMTest {
    long prodLong(long[] b1, long[] b2, long[] b3) {
<separator>
public class MyJVMTest {
    String print(byte arg) {
<separator>
package jdk.nashorn.test.models;
import java.util.List;
<separator>
public class MyJVMTest {
    boolean informationLossFloatToLong(Float value) {
<separator>
public class MyJVMTest {
    long testDurationMillisDefault = 10_000L;
<separator>
public class MyJVMTest {
    float doh(float f) {
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToFloat(Double value) {
<separator>
import java.io.File;
import java.io.FileInputStream;
<separator>
public class MyJVMTest {
    void checkEq(String what, Object v, Object ref) throws Exception {
<separator>
public class MyJVMTest {
    void test_unpack2_swap(char[] a0, int[] p2) {
<separator>
public class MyJVMTest {
    void test(T8198502 t) {
<separator>
public class MyJVMTest {
    String print(float arg) {
<separator>
public class MyJVMTest {
    String helpGetLiveCapabilities() {
<separator>
import java.io.*;
import java.util.function.*;
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_ci(short[] a, int[] b) {
<separator>
public class MyJVMTest {
    short simpleb(short i) {
<separator>
public class MyJVMTest {
    String test(char[] chars) {
<separator>
public class MyJVMTest {
    void test_srav(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    float sumb(float[] a) {
<separator>
public class MyJVMTest {
    void assertTrue(boolean a) throws Exception {
<separator>
public class MyJVMTest {
    void test1_ror(long[] a0, long[] a1) {
<separator>
public class MyJVMTest {
    boolean m4(int[] src, boolean flag) {
<separator>
public class MyJVMTest {
    long getA() {
<separator>
public class MyJVMTest {
    void expect(long e, long g) {
<separator>
package compiler.codegen.aes;
import java.security.*;
<separator>
import java.beans.XMLDecoder;
public class MyJVMTest {
<separator>
import java.lang.reflect.Modifier;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test(int[] iaarg) {
<separator>
public class MyJVMTest {
    void doTest2(int expected, int max, int i) {
<separator>
import java.io.*;
import java.nio.channels.FileChannel;
<separator>
public class MyJVMTest {
    void test_divi(double[] a0, double[] a1) {
<separator>
public class MyJVMTest {
    String bbbb() {
<separator>
package org.openj9.test.typeAnnotation;
import java.io.Serializable;
<separator>
public class MyJVMTest {
    int method1(int key) {
<separator>
public class MyJVMTest {
    void test_cp(int[] a, int[] b, double[] c, double[] d) {
<separator>
package jdk.test.failurehandler;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_andv(char[] a0, char[] a1, short b) {
<separator>
public class MyJVMTest {
    long IIMM24_5 = 0x1001000;
<separator>
import java.awt.*;
import java.util.*;
<separator>
import javax.naming.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci_neg(short[] a, int[] b) {
<separator>
public class MyJVMTest {
    void set(final Object value) {
<separator>
public class MyJVMTest {
    boolean verifyShortCaching() {
<separator>
public class MyJVMTest {
    void test_divv(char[] a0, char[] a1, int b) {
<separator>
import static java.awt.GraphicsEnvironment.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String helpGetJ9method() {
<separator>
public class MyJVMTest {
    int testRorOrInt16Orn(int val) {
<separator>
public class MyJVMTest {
    void test_suba(char[] a0, char[] a1, short[] a2) {
<separator>
public class MyJVMTest {
    byte[] generateBytes(int length) {
<separator>
public class MyJVMTest {
    double remi_sum2() {
<separator>
public class MyJVMTest {
    double remi_sumb2_cond() {
<separator>
public class MyJVMTest {
    void add(int field, int amount) {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(long[] a, long[] b, long c, long d) {
<separator>
public class MyJVMTest {
    float sumb2(float[] a) {
<separator>
import java.awt.Robot;
import java.awt.event.ActionEvent;
<separator>
public class MyJVMTest {
    String u = "csu";
<separator>
public class MyJVMTest {
    int zeroHashes(String s) {
<separator>
public class MyJVMTest {
    String helpVoidFER() {
<separator>
public class MyJVMTest {
    boolean[] getIssuerUniqueID() {
<separator>
public class MyJVMTest {
    boolean test_isNeC(int a) {
<separator>
public class MyJVMTest {
    boolean next(int rows) {
<separator>
public class MyJVMTest {
    long startTime = System.nanoTime();
<separator>
public class MyJVMTest {
    int n;
<separator>
public class MyJVMTest {
    int cnt1 = 0;
<separator>
public class MyJVMTest {
    String extractDummyNameSuffix(String string) {
<separator>
public class MyJVMTest {
    void test_adda(char[] a0, char[] a1, short[] a2) {
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, float[] b, byte c, float d) {
<separator>
public class MyJVMTest {
    int j;
<separator>
public class MyJVMTest {
    int stringSwitch(String msvName) {
<separator>
import java.security.MessageDigest;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int pseudodelay;
<separator>
public class MyJVMTest {
    boolean OPT_NOTHROW = false;
<separator>
public class MyJVMTest {
    float remi_sum_cond() {
<separator>
public class MyJVMTest {
    void reductionInit1(int[] a, int[] b, int[] c) {
<separator>
public class MyJVMTest {
    Throwable first;
<separator>
public class MyJVMTest {
    int test4() {
<separator>
public class MyJVMTest {
    void runTest(String className, String cfeMessage) {
<separator>
public class MyJVMTest {
    void not_inlined1() {
<separator>
public class MyJVMTest {
    String NATIVE_LIBRARY_NAME = "j9offjnitest26";
<separator>
public class MyJVMTest {
    String returnBzhiI2LErrMessage(long value, long value2) {
<separator>
public class MyJVMTest {
    void testProtectionDomain(String shared, String nonShared) throws Throwable {
<separator>
public class MyJVMTest {
    String helpThreadStart() {
<separator>
public class MyJVMTest {
    void test_vi_inv(char[] a, char b, int k) {
<separator>
public class MyJVMTest {
    void test_vi(byte[] a, double[] b, byte c, double d) {
<separator>
public class MyJVMTest {
    int remi_sum() {
<separator>
public class MyJVMTest {
    String helpVerboseGCSubscription_2multiple() {
<separator>
import javax.management.*;
import javax.management.timer.*;
<separator>
public class MyJVMTest {
    void test_cp(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    X x;
<separator>
package compiler.codegen;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    short var_1;
<separator>
public class MyJVMTest {
    short remi_sump2(Short j1) {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(char[] a, char[] b, char c, char d) {
<separator>
public class MyJVMTest {
    int testRorOrInt1Orn(int val) {
<separator>
import java.awt.Image;
import java.awt.image.BufferedImage;
<separator>
package compiler.intrinsics.zip;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void doKMDiscard() {
<separator>
package java.lang.invoke;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int limit5 = Integer.MIN_VALUE + 10000;
<separator>
public class MyJVMTest {
    long testRorOrLong16Eon(long val) {
<separator>
public class MyJVMTest {
    boolean isClear() {
<separator>
public class MyJVMTest {
    Class<?> forName0() throws ClassNotFoundException {
<separator>
public class MyJVMTest {
    long blsmskq(long src1) {
<separator>
public class MyJVMTest {
    void m(X x1, Y y2) {
<separator>
public class MyJVMTest {
    int getLeastMaximum(int field) {
<separator>
public class MyJVMTest {
    boolean Test(String parent, String child, String info) {
<separator>
public class MyJVMTest {
    Class<?> forName2() throws Exception {
<separator>
public class MyJVMTest {
    TestUI test = null;
<separator>
public class MyJVMTest {
    long MASK31 = 0x0000_0000_8000_0000L;
<separator>
public class MyJVMTest {
    String dummyString = "long long string";
<separator>
package jdk.test.failurehandler;
import java.io.IOException;
<separator>
public class MyJVMTest {
    int Test(String s) {
<separator>
public class MyJVMTest {
    float testm2(float f, int i) {
<separator>
public class MyJVMTest {
    void test_pack4_swap(long[] p4, char[] a1) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(int[] a, int[] b, int c, int d) {
<separator>
public class MyJVMTest {
    void test(int arg) throws Throwable {
<separator>
public class MyJVMTest {
    int getNumber() {
<separator>
public class MyJVMTest {
    boolean isRVObserver() {
<separator>
package j9vm.runner;
import java.io.*;
<separator>
public class MyJVMTest {
    String helpSingleShot() {
<separator>
public class MyJVMTest {
    void test_srlv(char[] a0, char[] a1, int b) {
<separator>
public class MyJVMTest {
    String[] asciiIn = { "xn--egbpdaj6bu4bxfgehfvwxn", "xn--ihqwcrb4cv8a8dqg056pqjye", "xn--Proprostnemluvesky-uyb24dma41a", "xn--4dbcagdahymbxekheh6e0a7fei0b", "xn--i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd", "xn--n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa", "xn--b1abfaaepdrnnbgefbaDotcwatmq2g4l", "xn--PorqunopuedensimplementehablarenEspaol-fmd56a", "xn--ihqwctvzc91f659drss3x8bo0yb", "xn--TisaohkhngthchnitingVit-kjcr8268qyxafd2f1b9g", "xn--3B-ww4c5e180e575a65lsy2b", "xn---with-SUPER-MONKEYS-pc58ag80a8qai00g7n9n", "xn--Hello-Another-Way--fc4qua05auwb3674vfr0b", "xn--2-u9tlzr9756bt3uc0v", "xn--MajiKoi5-783gue6qz075azm5e", "xn--de-jg4avhby1noc0d", "xn--d9juau41awczczp", "XN--097CCDEKGHQJK", "XN--db8CBHEJLGH4E0AL", "xn--hxargifdar", "xn--bonusaa-5bb1da", "xn--b1abfaaepdrnnbgefbadotcwatmq2g4l" };
<separator>
public class MyJVMTest {
    int exitValue;
<separator>
public class MyJVMTest {
    void test_vi(float[] a, double[] b, float c, double d) {
<separator>
public class MyJVMTest {
    int testm1() {
<separator>
public class MyJVMTest {
    Class<?> forName3() throws Exception {
<separator>
public class MyJVMTest {
    String getSigAlgOID() {
<separator>
public class MyJVMTest {
    boolean do_throw;
<separator>
public class MyJVMTest {
    long s_long_method() {
<separator>
public class MyJVMTest {
    <T> int f(T x) {
<separator>
public class MyJVMTest {
    void test_init(double[] a0) {
<separator>
public class MyJVMTest {
    Object m7_src(Object src) {
<separator>
public class MyJVMTest {
    String staticProtectedMethod() {
<separator>
public class MyJVMTest {
    void run(T object) {
<separator>
public class MyJVMTest {
    String toString;
<separator>
public class MyJVMTest {
    double summ2(double[] a) {
<separator>
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocket;
<separator>
public class MyJVMTest {
    String helpClassInstanceTraversal() {
<separator>
public class MyJVMTest {
    void moo(boolean cond) {
<separator>
public class MyJVMTest {
    void test_orv(char[] a0, char[] a1, short b) {
<separator>
public class MyJVMTest {
    B getB() {
<separator>
public class MyJVMTest {
    void failed(String s) {
<separator>
import java.lang.Thread.UncaughtExceptionHandler;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_ci_oppos(short[] a, double[] b) {
<separator>
public class MyJVMTest {
    int depth = 50;
<separator>
public class MyJVMTest {
    void test_ci(byte[] a, float[] b) {
<separator>
import java.util.Collection;
import java.util.List;
<separator>
public class MyJVMTest {
    void m2() {
<separator>
import java.awt.Image;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long i;
<separator>
package com.sun.swingset3.demos.spinner;
import javax.swing.*;
<separator>
public class MyJVMTest {
    void sumReductionInit(float[] a, float[] b, float[] c) {
<separator>
import java.util.Formatter;
import java.util.Locale;
<separator>
public class MyJVMTest {
    Long foob(long i) {
<separator>
public class MyJVMTest {
    Thread m_interruptee;
<separator>
public class MyJVMTest {
    int test1(int[] src) {
<separator>
public class MyJVMTest {
    void test_unpack4(char[] a0, long[] p4) {
<separator>
public class MyJVMTest {
    long u(int[][] a) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(long[] a, long[] b, long c, long d, int k) {
<separator>
public class MyJVMTest {
    int test11() {
<separator>
public class MyJVMTest {
    long alignUp(long value, long alignment) {
<separator>
public class MyJVMTest {
    int andReductionImplement(int[] a, int[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    byte remi_sum2_cond() {
<separator>
public class MyJVMTest {
    String helpCase2() {
<separator>
public class MyJVMTest {
    void test_ci_inv(boolean[] a, int k) {
<separator>
public class MyJVMTest {
    boolean crash(Object src) {
<separator>
public class MyJVMTest {
    int assertionCount;
<separator>
public class MyJVMTest {
    int tzint(int i) {
<separator>
public class MyJVMTest {
    void testfd() {
<separator>
public class MyJVMTest {
    void testi() {
<separator>
public class MyJVMTest {
    int test_and(int a, int b) {
<separator>
import java.util.prefs.*;
import java.io.*;
<separator>
package jit.test.jitt.codecache;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    boolean test_isGt(double a, double b) {
<separator>
public class MyJVMTest {
    void error(String mesg) {
<separator>
public class MyJVMTest {
    void f1(int a, int b) {
<separator>
import static java.util.Calendar.*;
import java.util.Calendar;
<separator>
public class MyJVMTest {
    void pkgAe() {
<separator>
public class MyJVMTest {
    void testMethod() {
<separator>
public class MyJVMTest {
    Thread main;
<separator>
public class MyJVMTest {
    int additionalValue = 0;
<separator>
public class MyJVMTest {
    boolean isEqual(final int first, final int second) {
<separator>
public class MyJVMTest {
    int test_mulic1(int a) {
<separator>
public class MyJVMTest {
    byte[] createHeader(final byte[] type, final int rate, final int channel, final long size) {
<separator>
public class MyJVMTest {
    void throwException(String msg) {
<separator>
public class MyJVMTest {
    void badFunc(int size) {
<separator>
public class MyJVMTest {
    void init(long[] a, long seed) {
<separator>
public class MyJVMTest {
    double test(double f, int i) {
<separator>
public class MyJVMTest {
    Long f() {
<separator>
public class MyJVMTest {
    void test2(int[] iArr, long[] lArr) {
<separator>
public class MyJVMTest {
    boolean testMethod(double d1, Integer i1, long l1, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, float f9, float f10, float f11, float f12, float f13) {
<separator>
public class MyJVMTest {
    void m2(boolean trap) {
<separator>
package nsk.stress.numeric.numeric007;
public class MyJVMTest {
<separator>
import java.util.Locale;
import java.util.Scanner;
<separator>
public class MyJVMTest {
    int m(Other other) {
<separator>
public class MyJVMTest {
    Object array;
<separator>
public class MyJVMTest {
    boolean test_isGtC(int a) {
<separator>
public class MyJVMTest {
    int sum() {
<separator>
public class MyJVMTest {
    void doWait() {
<separator>
public class MyJVMTest {
    boolean test_isLe(double a, double b) {
<separator>
public class MyJVMTest {
    boolean messagesEqual(byte[] a1, byte[] a2) {
<separator>
import java.security.*;
import sun.security.provider.*;
<separator>
public class MyJVMTest {
    void checkCreateFailureId(int foundId, int expectedId) {
<separator>
import java.beans.Beans;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_cp_oppos(short[] a, short[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b, int[] c, int[] d) {
<separator>
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
<separator>
import java.io.Closeable;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test(Object[] listeners) {
<separator>
public class MyJVMTest {
    void check(int la, int lb) throws Exception {
<separator>
public class MyJVMTest {
    boolean test_isGe(long a, long b) {
<separator>
public class MyJVMTest {
    void displayBytes(String label, byte[] bytes) {
<separator>
public class MyJVMTest {
    String helpLivePhaseReenable() {
<separator>
public class MyJVMTest {
    double getJupiter() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(int[] a) {
<separator>
public class MyJVMTest {
    short remi_sump(Short j) {
<separator>
public class MyJVMTest {
    void test_vi(float[] a, float b) {
<separator>
public class MyJVMTest {
    Object m;
<separator>
public class MyJVMTest {
    void test_copy_ints(int[] dst, int[] src) {
<separator>
public class MyJVMTest {
    int value = 17;
<separator>
public class MyJVMTest {
    int test2(int stop, int[] array, int offset, boolean[] flags) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a, long[] b) {
<separator>
public class MyJVMTest {
    void go() {
<separator>
public class MyJVMTest {
    double test_neg(double a) {
<separator>
public class MyJVMTest {
    int f3() {
<separator>
public class MyJVMTest {
    void vMeth(byte bArg, int iArg, long lArg) {
<separator>
public class MyJVMTest {
    String AGENT_LIB = "SuspendWithRawMonitorEnter";
<separator>
public class MyJVMTest {
    void testdf() {
<separator>
import com.sun.net.httpserver.*;
import java.util.concurrent.*;
<separator>
public class MyJVMTest {
    Thread expectedThread;
<separator>
public class MyJVMTest {
    int mValue;
<separator>
public class MyJVMTest {
    float sumFloat(float[] c1, float[] c2, float[] c3) {
<separator>
import java.lang.management.*;
import java.io.*;
<separator>
public class MyJVMTest {
    long testRorOrLong16Orn(long val) {
<separator>
public class MyJVMTest {
    boolean isLower(int ch) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(int[] a, int[] b, double[] c, double[] d) {
<separator>
package transform;
import org.w3c.dom.Node;
<separator>
public class MyJVMTest {
    void test_ci(byte[] a) {
<separator>
public class MyJVMTest {
    short remi_sump2_cond(Short j1) {
<separator>
public class MyJVMTest {
    String toString(int value) {
<separator>
public class MyJVMTest {
    void doWith(StringBuffer sb) {
<separator>
public class MyJVMTest {
    float a, b, c, d, x;
<separator>
public class MyJVMTest {
    String addrToString(byte[] addr) {
<separator>
public class MyJVMTest {
    String eeee() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a, short[] b) {
<separator>
public class MyJVMTest {
    long count = 0;
<separator>
public class MyJVMTest {
    void test_ci(int[] a) {
<separator>
public class MyJVMTest {
    Object getA() {
<separator>
package nsk.jvmti.AttachOnDemand.attach002;
import java.util.Vector;
<separator>
public class MyJVMTest {
    void Unreached(Object o) throws Exception {
<separator>
public class MyJVMTest {
    void f1(int... a) {
<separator>
import sun.management.*;
public class MyJVMTest {
<separator>
import java.lang.invoke.MethodHandle;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    <T extends Object & Comparable<T>> int binarySearch(List<T> list, T key) {
<separator>
public class MyJVMTest {
    String print(int arg) {
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, float[] b, byte c, float d) {
<separator>
public class MyJVMTest {
    String helpGetUnstartedThreadStackTrace() {
<separator>
public class MyJVMTest {
    long getLong(long address) {
<separator>
public class MyJVMTest {
    long test_mulc3(long a) {
<separator>
public class MyJVMTest {
    void skipWhitespace() {
<separator>
import java.awt.Frame;
import java.awt.Menu;
<separator>
package nsk.stress.numeric.numeric002;
import java.io.PrintStream;
<separator>
public class MyJVMTest {
    void pause(long delay) {
<separator>
package test.auctionportal;
import org.w3c.dom.DOMErrorHandler;
<separator>
public class MyJVMTest {
    void test_ci_neg(short[] a, float[] b) {
<separator>
public class MyJVMTest {
    long MASK15 = 0x0000_0000_0000_8000L;
<separator>
public class MyJVMTest {
    long test(long i) {
<separator>
public class MyJVMTest {
    String byteToHex(byte num) {
<separator>
public class MyJVMTest {
    void test(double a) {
<separator>
public class MyJVMTest {
    String method1() {
<separator>
public class MyJVMTest {
    void testuf() {
<separator>
public class MyJVMTest {
    int signExtractInt2(int x) {
<separator>
public class MyJVMTest {
    void pkgBo() {
<separator>
public class MyJVMTest {
    char value;
<separator>
public class MyJVMTest {
    void m(int x) throws Exception {
<separator>
public class MyJVMTest {
    void foo(int i) throws Exception {
<separator>
public class MyJVMTest {
    int j = 0;
<separator>
public class MyJVMTest {
    <K> String genericMethod5(K k) {
<separator>
public class MyJVMTest {
    Object wakeup = new Object();
<separator>
public class MyJVMTest {
    void test_ci_oppos(float[] a, double[] b) {
<separator>
public class MyJVMTest {
    int NCOPY = 1;
<separator>
public class MyJVMTest {
    long test_shrc65(long a) {
<separator>
public class MyJVMTest {
    long test_shlc65(long a) {
<separator>
public class MyJVMTest {
    A not_inlined() {
<separator>
public class MyJVMTest {
    boolean running = true;
<separator>
public class MyJVMTest {
    void test_cp_oppos(int[] a, int[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    int[] run(int[] arr) {
<separator>
public class MyJVMTest {
    <A, B> Pair<A, B> of(A a, B b) {
<separator>
package metaspace.shrink_grow.ShrinkGrowTest;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void testfi() {
<separator>
public class MyJVMTest {
    String blah;
<separator>
public class MyJVMTest {
    long count() {
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    boolean test_isGt(float a, float b) {
<separator>
public class MyJVMTest {
    float test_rem(float a, float b) {
<separator>
public class MyJVMTest {
    void method1() {
<separator>
import java.awt.geom.GeneralPath;
import java.awt.geom.Path2D;
<separator>
public class MyJVMTest {
    void test(long negativeEvenNumber) {
<separator>
public class MyJVMTest {
    Local z;
<separator>
public class MyJVMTest {
    void pkgBe() {
<separator>
public class MyJVMTest {
    int testExtraParens() {
<separator>
public class MyJVMTest {
    Object o = new Object() {
<separator>
public class MyJVMTest {
    void check(long value, long result, long expected) {
<separator>
public class MyJVMTest {
    boolean test_isEqC(int a) {
<separator>
public class MyJVMTest {
    int test_ushrc1(int a) {
<separator>
public class MyJVMTest {
    long loadB2L_mask8(byte[] ba) {
<separator>
public class MyJVMTest {
    boolean test_isLtC(float a) {
<separator>
public class MyJVMTest {
    int iFld = 1;
<separator>
package com.ibm.jvmti.tests.getOrSetLocal;
import java.util.concurrent.Semaphore;
<separator>
public class MyJVMTest {
    int testRorAddInt32(int val) {
<separator>
public class MyJVMTest {
    void run_loop_with_safepoint(float[] a0, float b) {
<separator>
public class MyJVMTest {
    int delay = 0;
<separator>
public class MyJVMTest {
    byte[] toByteArray(String s) {
<separator>
import javax.imageio.ImageReadParam;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int getInteger() {
<separator>
public class MyJVMTest {
    long test_xor(long a, long b) {
<separator>
public class MyJVMTest {
    boolean test_isNe(double a, double b) {
<separator>
public class MyJVMTest {
    float test_neg(float a) {
<separator>
public class MyJVMTest {
    int remi_sumb_cond() {
<separator>
public class MyJVMTest {
    int v = 1;
<separator>
import java.util.Hashtable;
import javax.management.ObjectName;
<separator>
public class MyJVMTest {
    void init(int[] src) {
<separator>
public class MyJVMTest {
    void prodReductionInit(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    boolean b;
<separator>
public class MyJVMTest {
    byte remi_sum_cond() {
<separator>
public class MyJVMTest {
    long testm(long i) {
<separator>
public class MyJVMTest {
    int testRorOrInt31Bic(int val) {
<separator>
public class MyJVMTest {
    String constr = "x1x";
<separator>
public class MyJVMTest {
    long i_long_method() {
<separator>
public class MyJVMTest {
    int i3;
<separator>
public class MyJVMTest {
    void checkName(String name) throws Exception {
<separator>
public class MyJVMTest {
    String getSomething() {
<separator>
public class MyJVMTest {
    int testRorOrInt31(int val) {
<separator>
public class MyJVMTest {
    void test10_4(Object o) {
<separator>
public class MyJVMTest {
    int test_subi(int a, int b) {
<separator>
public class MyJVMTest {
    void test_ci_inv(char[] a, int k) {
<separator>
public class MyJVMTest {
    void test_vi(long[] a, float[] b, long c, float d) {
<separator>
public class MyJVMTest {
    void test_vi_neg(byte[] a, long[] b, byte c, long d) {
<separator>
public class MyJVMTest {
    String ddd() {
<separator>
package failureAtomicity;
import java.io.IOException;
<separator>
import java.io.File;
import javax.swing.JApplet;
<separator>
public class MyJVMTest {
    void breakpoint1() {
<separator>
public class MyJVMTest {
    void test_sllv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    long id;
<separator>
public class MyJVMTest {
    void accessArrayVariables(int[] array, int i) {
<separator>
public class MyJVMTest {
    String thisStr;
<separator>
public class MyJVMTest {
    void testCallee() {
<separator>
public class MyJVMTest {
    short sump(short[] a, Short result) {
<separator>
public class MyJVMTest {
    int testRorAddInt31(int val) {
<separator>
public class MyJVMTest {
    double[] logSummandArray;
<separator>
public class MyJVMTest {
    boolean isOpenJ9Status = System.getProperty("java.vm.vendor").contains("OpenJ9");
<separator>
public class MyJVMTest {
    void test_2ci(int[] a, int[] b) {
<separator>
public class MyJVMTest {
    void test_addi(double[] a0, double[] a1) {
<separator>
public class MyJVMTest {
    void test_cp_neg(char[] a, char[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    void test_vi_neg(int[] a, float[] b, int c, float d) {
<separator>
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadInfo;
<separator>
public class MyJVMTest {
    Object test1(int arg) {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(boolean[] a, boolean[] b, boolean c, boolean d) {
<separator>
public class MyJVMTest {
    int lzint(int i) {
<separator>
public class MyJVMTest {
    void init(int[] src, int[] dst, int[] ref) {
<separator>
package compiler.loopopts.superword;
import java.util.Random;
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, double[] b, byte c, double d) {
<separator>
public class MyJVMTest {
    void test_cp(int[] a, int[] b) {
<separator>
public class MyJVMTest {
    void test_unpack2(char[] a0, int[] p2) {
<separator>
public class MyJVMTest {
    void test_vi_neg(int[] a, long[] b, int c, long d) {
<separator>
public class MyJVMTest {
    Process worker = null;
<separator>
public class MyJVMTest {
    String method0() {
<separator>
public class MyJVMTest {
    long loadS2Lmask16(short[] sa) {
<separator>
public class MyJVMTest {
    short sumb2(short[] a) {
<separator>
public class MyJVMTest {
    int parseAppointment(String[] args) {
<separator>
public class MyJVMTest {
    int[] x = new int[3];
<separator>
public class MyJVMTest {
    long testRorOrLong64(long val) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(byte[] a, byte[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    int test_xorc2(int a) {
<separator>
public class MyJVMTest {
    float test_add(float a, float b) {
<separator>
package nsk.jvmti.CompiledMethodUnload;
import java.io.*;
<separator>
public class MyJVMTest {
    boolean m3(int[] src, boolean flag) {
<separator>
public class MyJVMTest {
    boolean[] getKeyUsage() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(short[] a, float[] b, short c, float d) {
<separator>
public class MyJVMTest {
    boolean counterrors;
<separator>
public class MyJVMTest {
    String testMethod() {
<separator>
public class MyJVMTest {
    int testRorOrInt16(int val) {
<separator>
public class MyJVMTest {
    boolean test_isLeC(int a) {
<separator>
public class MyJVMTest {
    void checkIsOldVersion(Throwable t) {
<separator>
public class MyJVMTest {
    int f(String s, Integer... args) {
<separator>
public class MyJVMTest {
    void checkVal(double v1, double v2) {
<separator>
public class MyJVMTest {
    String err = "sorry - checkRead()";
<separator>
public class MyJVMTest {
    String returnNothing(int i) {
<separator>
public class MyJVMTest {
    int sum2(int[] a) {
<separator>
public class MyJVMTest {
    void test_ci_neg(byte[] a, long[] b) {
<separator>
public class MyJVMTest {
    int testRolIntApi(int val, int distance) {
<separator>
public class MyJVMTest {
    int test_loop(int x) {
<separator>
public class MyJVMTest {
    int remi_sumb2() {
<separator>
public class MyJVMTest {
    void test(short[] array) {
<separator>
public class MyJVMTest {
    int size = 128;
<separator>
public class MyJVMTest {
    long _loadS2Lmask13(short[] sa) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(short[] a, int[] b) {
<separator>
public class MyJVMTest {
    byte[] getSrc() {
<separator>
public class MyJVMTest {
    String vmVersion = System.getProperty("java.vm.version");
<separator>
public class MyJVMTest {
    int[] iArr;
<separator>
public class MyJVMTest {
    double z = 0;
<separator>
public class MyJVMTest {
    int four() {
<separator>
import java.lang.Character.UnicodeBlock;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    String overloaded(final Double a, final Double b) {
<separator>
package jaxp.library;
import java.net.URL;
<separator>
public class MyJVMTest {
    void test_cp_oppos(short[] a, short[] b) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(short[] a, short[] b, short c, short d, int k) {
<separator>
package jdk.internal.net.http;
import java.util.Random;
<separator>
public class MyJVMTest {
    int meth2() {
<separator>
public class MyJVMTest {
    short simple2(short i) {
<separator>
public class MyJVMTest {
    void test_vi(double[] a, double b) {
<separator>
public class MyJVMTest {
    int[] iArrFld = new int[50];
<separator>
public class MyJVMTest {
    byte getSaturn() {
<separator>
public class MyJVMTest {
    String getString(String in) {
<separator>
public class MyJVMTest {
    float testb(float f, int i) {
<separator>
public class MyJVMTest {
    byte test2(byte i) {
<separator>
public class MyJVMTest {
    int shortFall;
<separator>
public class MyJVMTest {
    long lFld = 10;
<separator>
public class MyJVMTest {
    long b = 0;
<separator>
public class MyJVMTest {
    int m1(int i) {
<separator>
public class MyJVMTest {
    void test_orv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    int test(Class<?> c1, Class<?> c2) {
<separator>
public class MyJVMTest {
    void foo(String[] args) {
<separator>
public class MyJVMTest {
    void test_cp(long[] a, long[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    long andnq(long src1, long src2) {
<separator>
public class MyJVMTest {
    short var_105 = 19709;
<separator>
public class MyJVMTest {
    void test3(int val) {
<separator>
public class MyJVMTest {
    boolean informationLossFloatToChar(Float value) {
<separator>
public class MyJVMTest {
    long l(int[] a) {
<separator>
public class MyJVMTest {
    void test_suba(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    boolean throwError;
<separator>
import java.awt.Point;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int sump(int[] a, Integer result) {
<separator>
import java.security.CodeSource;
import java.net.URL;
<separator>
import java.rmi.*;
import java.rmi.activation.*;
<separator>
public class MyJVMTest {
    Object[] toArray() {
<separator>
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
<separator>
public class MyJVMTest {
    int waitedNB;
<separator>
public class MyJVMTest {
    int fcomp(long l) {
<separator>
public class MyJVMTest {
    int simple(int i) {
<separator>
public class MyJVMTest {
    void test_cp(short[] a, short[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    String E1000G0HOSTNAME = "fe80:0:0:0:21b:24ff:febd:f29c%e1000g0";
<separator>
public class MyJVMTest {
    byte[] DaysInMonth = new byte[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
<separator>
public class MyJVMTest {
    String toHexByteString(int n) {
<separator>
public class MyJVMTest {
    boolean test_isGeC(int a) {
<separator>
public class MyJVMTest {
    void m(boolean some_condition) {
<separator>
public class MyJVMTest {
    void test_ci_neg(long[] a, float[] b) {
<separator>
public class MyJVMTest {
    int test(String str1, String str2) {
<separator>
public class MyJVMTest {
    int[] m3(int[] src, int src_offset) {
<separator>
public class MyJVMTest {
    float testb2(float f, int i) {
<separator>
import java.awt.image.BandedSampleModel;
import java.awt.image.DataBuffer;
<separator>
public class MyJVMTest {
    Object field = new Object[0];
<separator>
package jdk.nashorn.test.tools;
import jdk.nashorn.internal.runtime.Undefined;
<separator>
public class MyJVMTest {
    int iFldStatic = 10;
<separator>
public class MyJVMTest {
    int w = 2;
<separator>
public class MyJVMTest {
    boolean test_isNeC(float a) {
<separator>
public class MyJVMTest {
    double sumb(double[] a) {
<separator>
public class MyJVMTest {
    long testRorOrLong16And(long val) {
<separator>
public class MyJVMTest {
    void checkNanoTime(long diff) {
<separator>
public class MyJVMTest {
    byte simpleb2(byte i) {
<separator>
public class MyJVMTest {
    void check_f2l(long expect) {
<separator>
public class MyJVMTest {
    boolean test_isLeC(long a) {
<separator>
import com.sun.net.httpserver.HttpExchange;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int[] getRunLimits(int runCount, String levels) {
<separator>
public class MyJVMTest {
    int initInt(String[] args, int v) {
<separator>
public class MyJVMTest {
    boolean informationLossLongToByte(Long value) {
<separator>
public class MyJVMTest {
    String[] garbage_array;
<separator>
public class MyJVMTest {
    <E1 extends Throwable> Integer computeThrowable() throws E1 {
<separator>
public class MyJVMTest {
    void sayHello() {
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, short[] b, byte c, short d) {
<separator>
public class MyJVMTest {
    void roll(int field, boolean up) {
<separator>
public class MyJVMTest {
    int readiness() {
<separator>
public class MyJVMTest {
    void testdi() {
<separator>
public class MyJVMTest {
    Object objectField;
<separator>
public class MyJVMTest {
    char[] hexDigits = "0123456789abcdef".toCharArray();
<separator>
public class MyJVMTest {
    int sumReductionImplement(int[] a, int[] b, int[] c, int[] d, int total) {
<separator>
public class MyJVMTest {
    String getRootsTXT(int nr, final double[] re, final double[] im) {
<separator>
public class MyJVMTest {
    Class<?> forName() {
<separator>
public class MyJVMTest {
    int f(int... args) {
<separator>
public class MyJVMTest {
    long test_or(long a, long b) {
<separator>
public class MyJVMTest {
    int passed = 0, failed = 0;
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, float[] b, byte c, float d) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(byte[] a, float[] b) {
<separator>
public class MyJVMTest {
    String test(boolean cond) {
<separator>
public class MyJVMTest {
    boolean clear = false;
<separator>
public class MyJVMTest {
    int not_inlined() {
<separator>
public class MyJVMTest {
    void test_unrl_lsai(byte[] a0, byte[] a1) {
<separator>
import java.util.Currency;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_pack2(int[] p2, char[] a1) {
<separator>
public class MyJVMTest {
    void test(IllegalSignature<?> outer) {
<separator>
public class MyJVMTest {
    int fCounter;
<separator>
public class MyJVMTest {
    int i5 = 168, iFld = 2, x, y;
<separator>
public class MyJVMTest {
    long test_ushrc1(long a) {
<separator>
public class MyJVMTest {
    char[] pattern0 = { 0 };
<separator>
public class MyJVMTest {
    void test_ci(char[] a) {
<separator>
import javax.tools.*;
import static javax.tools.StandardLocation.*;
<separator>
public class MyJVMTest {
    int findBytes(byte[] needle, byte[] haystack) {
<separator>
public class MyJVMTest {
    int getBasicConstraints() {
<separator>
public class MyJVMTest {
    void test_diva(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    long testRorOrLong63Orn(long val) {
<separator>
public class MyJVMTest {
    String helpGetClassVersion() {
<separator>
public class MyJVMTest {
    boolean informationLossDoubleToByte(Double value) {
<separator>
public class MyJVMTest {
    void foo(Y y) {
<separator>
import java.nio.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int remi_sum2() {
<separator>
public class MyJVMTest {
    int RAND_MULT = 1103515245;
<separator>
import java.lang.annotation.*;
import java.lang.reflect.Method;
<separator>
public class MyJVMTest {
    int test1(int[] src, int[] dst) {
<separator>
public class MyJVMTest {
    boolean test_isNeC(double a) {
<separator>
public class MyJVMTest {
    int global = 42;
<separator>
public class MyJVMTest {
    boolean fillPrimRect(float x, float y, float w, float h, Object rectTex, Object wrapTex, float bx, float by, float bw, float bh, float f1, float f2, float f3, float f4, float f5, float f6, float f7, float f8, int i1, int i2) {
<separator>
public class MyJVMTest {
    void testNoSuppression() {
<separator>
import java.security.*;
import java.rmi.server.RemoteServer;
<separator>
public class MyJVMTest {
    String helpGetStackTrace() {
<separator>
public class MyJVMTest {
    void test_unrl_addi(float[] a0, float[] a1) {
<separator>
public class MyJVMTest {
    void test_cp_neg(float[] a, float[] b) {
<separator>
public class MyJVMTest {
    String selectCompressionType(final String suffix, final String[] types) {
<separator>
public class MyJVMTest {
    int[] arr;
<separator>
public class MyJVMTest {
    String def() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(short[] a) {
<separator>
public class MyJVMTest {
    byte remi_sumb2_cond() {
<separator>
package xp1;
import static javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI;
<separator>
import javax.tools.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int verify(String text, int i, double elem, double val) {
<separator>
public class MyJVMTest {
    void checkEqual(String s1, String s2) {
<separator>
public class MyJVMTest {
    String m(Integer i) {
<separator>
public class MyJVMTest {
    void test_ci_inv(float[] a, int k) {
<separator>
import java.io.*;
import java.util.List;
<separator>
public class MyJVMTest {
    void close(int arg) {
<separator>
public class MyJVMTest {
    int exceptionCount = 0;
<separator>
public class MyJVMTest {
    void test_andv(int[] a0, int[] a1, int b) {
<separator>
public class MyJVMTest {
    void test9_2(Object o) {
<separator>
public class MyJVMTest {
    Object sync;
<separator>
public class MyJVMTest {
    String gggg() {
<separator>
public class MyJVMTest {
    void testFloat() {
<separator>
public class MyJVMTest {
    double log10(double x) {
<separator>
public class MyJVMTest {
    int c;
<separator>
public class MyJVMTest {
    void test_cp_oppos(boolean[] a, boolean[] b) {
<separator>
public class MyJVMTest {
    int x = 42;
<separator>
public class MyJVMTest {
    void test_init(float[] a0) {
<separator>
import java.math.*;
import java.io.*;
<separator>
public class MyJVMTest {
    int[] finalArr = new int[42];
<separator>
public class MyJVMTest {
    int testToStringUnsigned() {
<separator>
import java.lang.StringBuilder;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    float testm(float f, int i) {
<separator>
import java.io.IOException;
import java.io.ObjectOutputStream;
<separator>
public class MyJVMTest {
    boolean verbose;
<separator>
public class MyJVMTest {
    <E extends D, D> void m(E e, D d) {
<separator>
public class MyJVMTest {
    void not_inlined() {
<separator>
import java.beans.ExceptionListener;
import java.beans.XMLDecoder;
<separator>
public class MyJVMTest {
    int testRorOrInt32Orn(int val) {
<separator>
public class MyJVMTest {
    void test_cp_neg(long[] a, long[] b, double[] c, double[] d) {
<separator>
package jdk.test.lib;
import java.util.Queue;
<separator>
public class MyJVMTest {
    int m1() {
<separator>
public class MyJVMTest {
    String toUpperCase(String message) {
<separator>
public class MyJVMTest {
    boolean Z;
<separator>
public class MyJVMTest {
    String comment;
<separator>
public class MyJVMTest {
    void launchApplication(final String launchName, final String launchMode, final String[] args) {
<separator>
public class MyJVMTest {
    int test_xor(int a, int b) {
<separator>
package java.util;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long signExtractLong2(long x) {
<separator>
public class MyJVMTest {
    void test_ci_neg(char[] a, short[] b) {
<separator>
public class MyJVMTest {
    void bug(int n) {
<separator>
public class MyJVMTest {
    void increment(float[] array) {
<separator>
import java.util.concurrent.atomic.AtomicInteger;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int tzcntl(int src1) {
<separator>
public class MyJVMTest {
    void verify(String text, long ref, long actual) {
<separator>
public class MyJVMTest {
    void singleChar3() {
<separator>
package test.java.lang.invoke;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    String foo(final String x) {
<separator>
public class MyJVMTest {
    double remi_summ2() {
<separator>
public class MyJVMTest {
    void go(String what, float result, float correctResult) {
<separator>
public class MyJVMTest {
    long MAX_UNSIGNED_INT = Integer.toUnsignedLong(0xffff_ffff);
<separator>
public class MyJVMTest {
    void test_2ci_oppos(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    void bar(boolean b) {
<separator>
public class MyJVMTest {
    void check(float a, float b) {
<separator>
package q;
import java.io.IOException;
<separator>
public class MyJVMTest {
    Object s_object_par_method(Object obj) {
<separator>
import java.io.*;
import sun.security.x509.*;
<separator>
public class MyJVMTest {
    int test1(int stop, int[] array, int offset, boolean[] flags) {
<separator>
public class MyJVMTest {
    String constr = "11111xx1x";
<separator>
public class MyJVMTest {
    void test_cp_oppos(short[] a, short[] b, int[] c, int[] d) {
<separator>
public class MyJVMTest {
    int f2() {
<separator>
public class MyJVMTest {
    void testff() {
<separator>
public class MyJVMTest {
    void checkUnequal(String s1, String s2) {
<separator>
import java.nio.channels.*;
import java.nio.file.*;
<separator>
public class MyJVMTest {
    Object getValueAt(int row, int col) {
<separator>
public class MyJVMTest {
    int getIntegerX() {
<separator>
package com.ibm.j9.security.bootpath;
import java.security.AccessController;
<separator>
public class MyJVMTest {
    int getX(int... dummy) {
<separator>
public class MyJVMTest {
    <U, T extends U> void sort(T[] a, Comparator<U> c) {
<separator>
public class MyJVMTest {
    Integer getNumber() {
<separator>
public class MyJVMTest {
    boolean test_isGe(int a, int b) {
<separator>
public class MyJVMTest {
    boolean isNonFatal(Throwable t) {
<separator>
public class MyJVMTest {
    int runLinCon(int initialValue) {
<separator>
public class MyJVMTest {
    double test_mul(double a, double b) {
<separator>
import javax.swing.JTable;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void testul() {
<separator>
public class MyJVMTest {
    void testNormalCompletion() {
<separator>
public class MyJVMTest {
    void assertEquals(String s, String expected) {
<separator>
public class MyJVMTest {
    void test_vi_neg(boolean[] a, boolean b) {
<separator>
public class MyJVMTest {
    int verify(String text, int i, float elem, float val) {
<separator>
public class MyJVMTest {
    int diffs = 0;
<separator>
public class MyJVMTest {
    void print(ProcessBuilder pb) {
<separator>
public class MyJVMTest {
    void test_unrl_init(long[] a0) {
<separator>
import java.awt.Component;
import java.awt.Container;
<separator>
public class MyJVMTest {
    void testdl() {
<separator>
import java.io.*;
import java.lang.annotation.*;
<separator>
public class MyJVMTest {
    byte remi_sumb_cond() {
<separator>
public class MyJVMTest {
    int dummy;
<separator>
public class MyJVMTest {
    long testRorOrLong64Eon(long val) {
<separator>
public class MyJVMTest {
    int testm(int i) {
<separator>
public class MyJVMTest {
    void testl() {
<separator>
public class MyJVMTest {
    int testRorOrInt31Eon(int val) {
<separator>
public class MyJVMTest {
    int test_xorc1(int a) {
<separator>
public class MyJVMTest {
    CharSequence subSequence(int st, int e) {
<separator>
public class MyJVMTest {
    String helpGarbageCollectionCycleEvent() {
<separator>
package utils;
import java.io.File;
<separator>
public class MyJVMTest {
    void test_ci(long[] a, float[] b) {
<separator>
public class MyJVMTest {
    void testb() {
<separator>
import javax.management.openmbean.*;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long testp(long i, Long ib) {
<separator>
public class MyJVMTest {
    String overloaded(final String a, final String b) {
<separator>
public class MyJVMTest {
    boolean shouldStop(long l, long stop) {
<separator>
import java.awt.Window;
public class MyJVMTest {
<separator>
package p1.resource;
import java.util.ListResourceBundle;
<separator>
public class MyJVMTest {
    void test_2vi_inv(byte[] a, byte[] b, byte c, byte d, int k) {
<separator>
public class MyJVMTest {
    String helpGetTimerInfo() {
<separator>
public class MyJVMTest {
    long MASK63 = 0x8000_0000_0000_0000L;
<separator>
package jdk.test.lib.process;
import java.io.BufferedReader;
<separator>
public class MyJVMTest {
    void checkCapacity(int before, int after) {
<separator>
public class MyJVMTest {
    char[] reset(char[] array) {
<separator>
public class MyJVMTest {
    void test_2ci_neg(boolean[] a, boolean[] b) {
<separator>
public class MyJVMTest {
    Object doFloorMod(long x, long y) {
<separator>
public class MyJVMTest {
    Class<?> getAnonymousClass() {
<separator>
public class MyJVMTest {
    void print(String id, boolean flag) {
<separator>
public class MyJVMTest {
    <K> String genericMethod2(K k) {
<separator>
public class MyJVMTest {
    void randomDelay() {
<separator>
public class MyJVMTest {
    void test_cp_neg(byte[] a, byte[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    String content;
<separator>
public class MyJVMTest {
    double getProp() {
<separator>
public class MyJVMTest {
    void testCorrectness(int total, int valid, String op) throws Exception {
<separator>
public class MyJVMTest {
    int MAX_DASH_LENGTH = 3;
<separator>
public class MyJVMTest {
    int tzcntq(long src1) {
<separator>
import javax.sound.sampled.Control;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    int nonNative() {
<separator>
public class MyJVMTest {
    void problematicMethod(int p) {
<separator>
package parsers;
import org.xml.sax.SAXException;
<separator>
public class MyJVMTest {
    byte remi_sum2() {
<separator>
public class MyJVMTest {
    int test_shrc33(int a) {
<separator>
public class MyJVMTest {
    byte remi_sump_cond(Byte j) {
<separator>
public class MyJVMTest {
    void test_cp(int[] a, int[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    long test2(long i) {
<separator>
public class MyJVMTest {
    boolean printDebug = false;
<separator>
public class MyJVMTest {
    A a = new A();
<separator>
public class MyJVMTest {
    int test(Class<?> clazz, boolean anonymous, boolean local, boolean member) {
<separator>
public class MyJVMTest {
    void test_2vi(long[] a, long[] b, long c, long d) {
<separator>
public class MyJVMTest {
    long test_rem(long a, long b) {
<separator>
public class MyJVMTest {
    String constr = "1111111111111xx1x";
<separator>
public class MyJVMTest {
    void test_2ci_inv(int[] a, int[] b, int k) {
<separator>
import java.util.*;
import javax.management.modelmbean.*;
<separator>
public class MyJVMTest {
    void run() throws Exception {
<separator>
public class MyJVMTest {
    String name = null;
<separator>
public class MyJVMTest {
    void test_vi_neg(short[] a, int[] b, short c, int d) {
<separator>
public class MyJVMTest {
    void test_ci(long[] a, double[] b) {
<separator>
public class MyJVMTest {
    void doNotify() {
<separator>
package compiler.escapeAnalysis;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(double[] a, double[] b, double c, double d) {
<separator>
public class MyJVMTest {
    int lzcntq(long src1) {
<separator>
public class MyJVMTest {
    String helpCase1() {
<separator>
public class MyJVMTest {
    boolean test_isEqC(float a) {
<separator>
public class MyJVMTest {
    String[] protocol = new String[] { "TLSv1" };
<separator>
import java.math.BigInteger;
import java.util.function.Supplier;
<separator>
public class MyJVMTest {
    byte remi_sump(Byte j) {
<separator>
public class MyJVMTest {
    void test(Object[] aArray) {
<separator>
public class MyJVMTest {
    void test_cp_oppos(char[] a, char[] b, short[] c, short[] d) {
<separator>
public class MyJVMTest {
    void assertTrue(boolean expr) {
<separator>
public class MyJVMTest {
    void test_vi_inv(long[] a, long b, int k) {
<separator>
public class MyJVMTest {
    boolean isLeaf() {
<separator>
import java.awt.Desktop;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void go(String what, double result, double correctResult) {
<separator>
public class MyJVMTest {
    T7024096 nest(int expectedline, T7024096... args) {
<separator>
public class MyJVMTest {
    long test(long v) {
<separator>
import java.io.*;
import java.util.logging.*;
<separator>
public class MyJVMTest {
    void test(Object obj, String className) {
<separator>
package compiler.inlining;
import java.util.regex.Pattern;
<separator>
public class MyJVMTest {
    <E extends Integer> void doit(E[] a) {
<separator>
import java.lang.*;
import java.io.*;
<separator>
public class MyJVMTest {
    String getStringElement(int elementIndex, String string) {
<separator>
public class MyJVMTest {
    byte sump(byte[] a, Byte result) {
<separator>
public class MyJVMTest {
    Object call() {
<separator>
public class MyJVMTest {
    void test_vi_neg(double[] a, double b) {
<separator>
public class MyJVMTest {
    String vendorName = null;
<separator>
public class MyJVMTest {
    int getAttributeCount() {
<separator>
public class MyJVMTest {
    Tester_Class_1 func_6(String arg_0, String arg_1) {
<separator>
public class MyJVMTest {
    int[] d = { 1, 2, 3, 4 };
<separator>
public class MyJVMTest {
    float testp2(float f, int i, Float ib1) {
<separator>
public class MyJVMTest {
    void method2() {
<separator>
public class MyJVMTest {
    void howManyGroup(int k) {
<separator>
public class MyJVMTest {
    long method(long l1, long l2, Object[] a) {
<separator>
public class MyJVMTest {
    void test_ci(byte[] a, double[] b) {
<separator>
public class MyJVMTest {
    void test_ci(int[] a, double[] b) {
<separator>
public class MyJVMTest {
    long loadS2LmaskFF(short[] sa) {
<separator>
public class MyJVMTest {
    long _beforeMillis = 0L;
<separator>
public class MyJVMTest {
    int remi_sump(Integer j) {
<separator>
public class MyJVMTest {
    int testm3() {
<separator>
public class MyJVMTest {
    String label;
<separator>
public class MyJVMTest {
    boolean isLetter(char c) {
<separator>
public class MyJVMTest {
    String unquote(String str) {
<separator>
public class MyJVMTest {
    int testRorOrInt32Eor(int val) {
<separator>
public class MyJVMTest {
    void test_vi_neg(short[] a, float[] b, short c, float d) {
<separator>
public class MyJVMTest {
    short simplep2(short i, Short ib1) {
<separator>
public class MyJVMTest {
    int test_int_reversed(int i) {
<separator>
public class MyJVMTest {
    int sampleJavaMethod(int foo) {
<separator>
public class MyJVMTest {
    String next() {
<separator>
public class MyJVMTest {
    long testRorLongApi(long val, int distance) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(double[] a, double[] b, double c, double d) {
<separator>
import java.security.AccessController;
import java.security.Permission;
<separator>
public class MyJVMTest {
    void test_2vi(boolean[] a, boolean[] b, boolean c, boolean d) {
<separator>
public class MyJVMTest {
    long quittingTime;
<separator>
public class MyJVMTest {
    void verify(int[] src, int[] ref) {
<separator>
public class MyJVMTest {
    boolean equals(byte[] a, byte[] b) {
<separator>
public class MyJVMTest {
    boolean isPresent(String s, String[] a) {
<separator>
public class MyJVMTest {
    boolean b = true;
<separator>
public class MyJVMTest {
    float sump(float[] a, Float result) {
<separator>
public class MyJVMTest {
    void test_2vi_neg(char[] a, char[] b, char c, char d) {
<separator>
public class MyJVMTest {
    Class<?> forName1() throws Exception {
<separator>
public class MyJVMTest {
    String anchorLink(String file, String anchorName, String text) {
<separator>
public class MyJVMTest {
    int testRorOrInt16Bic(int val) {
<separator>
public class MyJVMTest {
    int sz;
<separator>
public class MyJVMTest {
    void paramTest() throws Exception {
<separator>
public class MyJVMTest {
    void test_vi_oppos(char[] a, short[] b, char c, short d) {
<separator>
package renderperf;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long orReductionImplement(long[] a, long[] b, long[] c, long[] d) {
<separator>
public class MyJVMTest {
    void assertTrue(boolean b) {
<separator>
public class MyJVMTest {
    void test_cp_inv(long[] a, long[] b, int k) {
<separator>
public class MyJVMTest {
    void check(long result, long expected) {
<separator>
public class MyJVMTest {
    String toHexString(byte[] block) {
<separator>
public class MyJVMTest {
    double remi_sumb_cond() {
<separator>
public class MyJVMTest {
    float sum(float[] a) {
<separator>
public class MyJVMTest {
    void assertEquals(String actual, String expected) {
<separator>
public class MyJVMTest {
    int getNarrowInt(boolean b, int lo, int hi) {
<separator>
public class MyJVMTest {
    byte value;
<separator>
public class MyJVMTest {
    boolean x1 = false;
<separator>
public class MyJVMTest {
    void test_vi_neg(int[] a, int b) {
<separator>
public class MyJVMTest {
    int summ2(int[] a) {
<separator>
public class MyJVMTest {
    void test_ci_neg(boolean[] a) {
<separator>
public class MyJVMTest {
    void test_2ci(char[] a, char[] b) {
<separator>
public class MyJVMTest {
    void m(int i, int index, char[] buf) {
<separator>
public class MyJVMTest {
    long testRolLongApi(long val, int distance) {
<separator>
public class MyJVMTest {
    void assertEqual(int expected, int got) {
<separator>
public class MyJVMTest {
    long acc;
<separator>
public class MyJVMTest {
    long IIMM12_0 = 0x1;
<separator>
public class MyJVMTest {
    boolean toBoolean(long x) {
<separator>
import java.util.stream.*;
import java.util.*;
<separator>
package compiler.profiling;
import java.lang.invoke.MethodHandle;
<separator>
public class MyJVMTest {
    boolean m5(int[] src, boolean flag1, boolean flag2) {
<separator>
public class MyJVMTest {
    int p = 0;
<separator>
public class MyJVMTest {
    int i = j = 1;
<separator>
public class MyJVMTest {
    int sumb(int[] a) {
<separator>
public class MyJVMTest {
    void test_unrl_addi(short[] a0, short[] a1) {
<separator>
public class MyJVMTest {
    void check(double expected, double got, String where) {
<separator>
package jdk.test.lib.process;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    Long toofoo() {
<separator>
public class MyJVMTest {
    int test1(int start, int stop) {
<separator>
import java.lang.annotation.*;
import static java.lang.annotation.RetentionPolicy.*;
<separator>
public class MyJVMTest {
    int test_shrc1(int a) {
<separator>
public class MyJVMTest {
    Object returnObject() {
<separator>
public class MyJVMTest {
    int MINUS_ONE = -1;
<separator>
public class MyJVMTest {
    void doit(Runnable r) {
<separator>
public class MyJVMTest {
    void check_double(long[] result, double d1, double d2) {
<separator>
public class MyJVMTest {
    byte remi_sump2_cond(Byte j1) {
<separator>
public class MyJVMTest {
    int test_sum(char[] a1) {
<separator>
public class MyJVMTest {
    int testRorOrInt32(int val) {
<separator>
public class MyJVMTest {
    byte sumb(byte[] a) {
<separator>
public class MyJVMTest {
    long MASK00 = 0x0000_0000_0000_0001L;
<separator>
public class MyJVMTest {
    String constr = "111111111111xx1x";
<separator>
public class MyJVMTest {
    int test_subc1(int a) {
<separator>
public class MyJVMTest {
    A field1;
<separator>
public class MyJVMTest {
    long signExtractLong3(long x) {
<separator>
public class MyJVMTest {
    void test_cp_inv(short[] a, short[] b, int k) {
<separator>
public class MyJVMTest {
    int test_mulic3(int a) {
<separator>
public class MyJVMTest {
    void test_divi(float[] a0, float[] a1) {
<separator>
public class MyJVMTest {
    void test_addv(char[] a0, char[] a1, char b) {
<separator>
public class MyJVMTest {
    <T extends Comparable<T>> T m(T v) {
<separator>
public class MyJVMTest {
    void test_ci_neg(long[] a) {
<separator>
public class MyJVMTest {
    void createGarbage() {
<separator>
public class MyJVMTest {
    long testRorAddLong16(long val) {
<separator>
public class MyJVMTest {
    int testb2(int i) {
<separator>
public class MyJVMTest {
    long foo() {
<separator>
public class MyJVMTest {
    double test(int limit) {
<separator>
public class MyJVMTest {
    long divint(long a) {
<separator>
public class MyJVMTest {
    double simpleb2(double i) {
<separator>
import java.beans.Statement;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    double remi_sump2_cond(Double j1) {
<separator>
public class MyJVMTest {
    int fail = 0;
<separator>
public class MyJVMTest {
    String makeLongHexString() {
<separator>
public class MyJVMTest {
    float prodFloat(float[] c1, float[] c2, float[] c3) {
<separator>
public class MyJVMTest {
    void test_unpack2(int[] a0, long[] p2) {
<separator>
public class MyJVMTest {
    void test_ci(int[] a, float[] b) {
<separator>
import static java.util.concurrent.TimeUnit.NANOSECONDS;
import static java.util.concurrent.TimeUnit.SECONDS;
<separator>
public class MyJVMTest {
    int remi_sump_cond(Integer j) {
<separator>
public class MyJVMTest {
    short simpleb2(short i) {
<separator>
public class MyJVMTest {
    long simpleb2(long i) {
<separator>
public class MyJVMTest {
    long remi_summ2() {
<separator>
public class MyJVMTest {
    long test_mulc4(long a) {
<separator>
public class MyJVMTest {
    void test_addi(byte[] a0, byte[] a1) {
<separator>
public class MyJVMTest {
    long testb2(long i) {
<separator>
public class MyJVMTest {
    int testRorOrInt31Eor(int val) {
<separator>
public class MyJVMTest {
    void test_2vi_inv(char[] a, char[] b, char c, char d, int k) {
<separator>
public class MyJVMTest {
    boolean verifyByteCaching() {
<separator>
public class MyJVMTest {
    double prodDouble(double[] d1, double[] d2, double[] d3) {
<separator>
public class MyJVMTest {
    void test_2ci_inv(double[] a, double[] b, int k) {
<separator>
package jit.test.tr.loopReplicator;
public class MyJVMTest {
<separator>
import javax.tools.*;
import java.io.File;
<separator>
public class MyJVMTest {
    void checkExternalSub(ExternalSub s) throws Throwable {
<separator>
public class MyJVMTest {
    void test_2vi_oppos(short[] a, short[] b, short c, short d) {
<separator>
public class MyJVMTest {
    int doNothingInJava3(Object obj1, Object obj2, Object obj3, Object obj4, Object obj5) {
<separator>
public class MyJVMTest {
    long IIMM24_4 = 0xfff000;
<separator>
public class MyJVMTest {
    void test_2ci_inv(float[] a, float[] b, int k) {
<separator>
public class MyJVMTest {
    Runnable beforeExecute;
<separator>
public class MyJVMTest {
    double test_sub(double a, double b) {
<separator>
public class MyJVMTest {
    int process(int a) {
<separator>
public class MyJVMTest {
    byte[] buffer = new byte[16384];
<separator>
public class MyJVMTest {
    double left;
<separator>
public class MyJVMTest {
    void test_ci(char[] a, short[] b) {
<separator>
public class MyJVMTest {
    int i = 6;
<separator>
public class MyJVMTest {
    void test_copy_ints_reversed(int[] dst, int[] src) {
<separator>
public class MyJVMTest {
    short sump2(short[] a, Short result2) {
<separator>
public class MyJVMTest {
    long MASK32 = 0x0000_0001_0000_0000L;
<separator>
public class MyJVMTest {
    int rotateRight1(int i, int distance) {
<separator>
public class MyJVMTest {
    boolean test_isLt(double a, double b) {
<separator>
public class MyJVMTest {
    long remi_sum2() {
<separator>
public class MyJVMTest {
    Object[][] getContents() {
<separator>
public class MyJVMTest {
    void test_ci_oppos(char[] a) {
<separator>
public class MyJVMTest {
    void test_2vi(float[] a, float[] b, float c, float d) {
<separator>
public class MyJVMTest {
    byte b = 1;
<separator>
public class MyJVMTest {
    void test_adda(int[] a0, int[] a1, int[] a2) {
<separator>
public class MyJVMTest {
    long sumReductionImplement(long[] a, long[] b, long[] c, long[] d, long total) {
<separator>
public class MyJVMTest {
    void test_ci_neg(char[] a) {
<separator>
public class MyJVMTest {
    int doNothingInJava() {
<separator>
public class MyJVMTest {
    short testm2(short i) {
<separator>
public class MyJVMTest {
    Object doFloorMod(long x, int y) {
<separator>
public class MyJVMTest {
    Object[] i_ref_array_method() {
<separator>
public class MyJVMTest {
    void test_cp(char[] a, char[] b) {
<separator>
public class MyJVMTest {
    byte[] dummy = new byte[256];
<separator>
public class MyJVMTest {
    float simple2(float i) {
<separator>
public class MyJVMTest {
    double remi_sump(Double j) {
<separator>
public class MyJVMTest {
    void test_2vi(char[] a, char[] b, char c, char d) {
<separator>
import java.awt.Toolkit;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void createThread(long stackSize) {
<separator>
public class MyJVMTest {
    String foo(Object in) {
<separator>
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
<separator>
public class MyJVMTest {
    double test2(double f, int i) {
<separator>
public class MyJVMTest {
    void howManyRule(int k) {
<separator>
public class MyJVMTest {
    int var = 0;
<separator>
public class MyJVMTest {
    long testRorOrLong1Eor(long val) {
<separator>
public class MyJVMTest {
    int w = 32;
<separator>
public class MyJVMTest {
    short remi_sumb2_cond() {
<separator>
import java.util.concurrent.Semaphore;
public class MyJVMTest {
<separator>
package vm.mlvm.indy.func.java.rawRetypes;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    void sleep() {
<separator>
public class MyJVMTest {
    int cnt;
<separator>
public class MyJVMTest {
    void test(T8203436a<?> outer) {
<separator>
import java.awt.GraphicsEnvironment;
import java.beans.Beans;
<separator>
public class MyJVMTest {
    int _loadUS_signExt(char[] ca) {
<separator>
public class MyJVMTest {
    void test_cp_neg(short[] a, short[] b, float[] c, float[] d) {
<separator>
public class MyJVMTest {
    int blsrl(int src1) {
<separator>
public class MyJVMTest {
    void test(int negativeEvenNumber) {
<separator>
package vm.compiler.coverage.parentheses.share.generation;
import java.util.Random;
<separator>
public class MyJVMTest {
    double testm(double f, int i) {
<separator>
public class MyJVMTest {
    void verify(int[] src) {
<separator>
public class MyJVMTest {
    boolean test_isEq(long a, long b) {
<separator>
public class MyJVMTest {
    void check_f2i(int expect) {
<separator>
public class MyJVMTest {
    long test_neg(long a) {
<separator>
public class MyJVMTest {
    float test_div(float a, float b) {
<separator>
public class MyJVMTest {
    boolean test_isLe(int a, int b) {
<separator>
public class MyJVMTest {
    int test_shlc1(int a) {
<separator>
import javax.sound.sampled.*;
import java.util.concurrent.TimeUnit;
<separator>
public class MyJVMTest {
    void test_ci_neg(long[] a, double[] b) {
<separator>
public class MyJVMTest {
    int rotateRight2(int i, int distance) {
<separator>
public class MyJVMTest {
    void test_ci_oppos(long[] a, float[] b) {
<separator>
import java.awt.geom.AffineTransform;
import java.util.Random;
<separator>
import java.beans.Expression;
public class MyJVMTest {
<separator>
public class MyJVMTest {
    long test_shl(long a, long b) {
<separator>
public class MyJVMTest {
    float simpleb2(float i) {
<separator>
public class MyJVMTest {
    String helpGetJ9vmThread() {
<separator>
public class MyJVMTest {
    boolean test2_taken;
<separator>
public class MyJVMTest {
    double bar() {
<separator>
public class MyJVMTest {
    int test1(int i, int limit) {
<separator>
public class MyJVMTest {
    boolean test(int[] array_src) {
<separator>
public class MyJVMTest {
    void vMeth(boolean b, int i, float f) {
<separator>
import java.util.*;
import static java.lang.Character.*;
<separator>
public class MyJVMTest {
    void m(GetInteger getter) {
<separator>
public class MyJVMTest {
    String bigString() {
<separator>
public class MyJVMTest {
    void test_cp_neg(float[] a, float[] b, double[] c, double[] d) {
<separator>
public class MyJVMTest {
    void check(Throwable t, String msg, Throwable cause) throws Exception {
<separator>
import java.io.IOException;
import java.util.Locale;
<separator>
public class MyJVMTest {
    void test(int[] arr, int inc) {
<separator>
public class MyJVMTest {
    boolean DEBUG = true;
<separator>
public class MyJVMTest {
    boolean informationLossLongToChar(Long value) {
<separator>
public class MyJVMTest {
    void test_vi_oppos(byte[] a, byte b) {
<separator>
public class MyJVMTest {
    long _loadS2LmaskFF(short[] sa) {
<separator>
public class MyJVMTest {
    void fail(String msg) {
<separator>
public class MyJVMTest {
    char HYPHEN = '-';
<separator>
public class MyJVMTest {
    void assertTrue(boolean b, String msg) {
<separator>
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
<separator>
public class MyJVMTest {
    boolean parseThrow(String s) {
<separator>
public class MyJVMTest {
    void error(String message) {
<separator>
public class MyJVMTest {
    void m(I arg) {
<separator>
public class MyJVMTest {
    boolean isAscii(int ch) {
<separator>
public class MyJVMTest {
    Object doStrictFloorDiv(int x, int y) {
<separator>
import java.util.*;
import javax.tools.*;
<separator>
import java.awt.*;
import java.applet.Applet;
<separator>
import javax.swing.*;
import java.awt.Component;
<separator>
import java.util.*;
import java.awt.datatransfer.DataFlavor;
<separator>
import java.util.*;
import java.util.concurrent.ThreadFactory;
<separator>
public class MyJVMTest {
    Integer g(Comparable<?> c) {
<separator>
import java.util.*;
import javax.smartcardio.*;
<separator>
public class MyJVMTest {
    boolean zconv3(Comparable<Boolean> o) {
<separator>
import java.util.Comparator;
public class MyJVMTest {
<separator>
import javax.sound.sampled.*;
import javax.sound.midi.*;
<separator>
import java.awt.*;
import java.awt.MultipleGradientPaint.*;
<separator>
import static javax.lang.model.type.TypeKind.*;
import javax.lang.model.util.*;
<separator>
public class MyJVMTest {
    <M> Integer f(Comparable<M> c) {
<separator>
public class MyJVMTest {
    double e;
<separator>
public class MyJVMTest {
    void t() {
<separator>
import javax.management.*;
import java.util.*;
<separator>
package p.q;
import java.io.*;
<separator>
